import React from 'react';
export default class TextAreaElement extends React.Component {
    constructor() {
        super(...arguments);
        this.textareaElement = null;
        this.state = {
            height: '100%',
        };
        this.getTextAreaRef = (ref) => {
            this.textareaElement = ref;
            const { forwardedRef } = this.props;
            if (forwardedRef && typeof forwardedRef === 'object') {
                // @ts-ignore
                forwardedRef.current = ref;
            }
            if (forwardedRef && typeof forwardedRef === 'function') {
                forwardedRef(ref);
            }
        };
        this.handleOnChange = event => {
            const { onChange } = this.props;
            if (this.props.resize === 'smart') {
                this.setState({
                    height: 'auto',
                }, () => {
                    if (this.props.resize === 'smart' && this.textareaElement) {
                        this.setState({
                            height: `${this.textareaElement.scrollHeight}px`,
                        });
                    }
                });
            }
            if (onChange) {
                onChange(event);
            }
        };
    }
    componentDidMount() {
        if (this.props.resize === 'smart' && this.textareaElement) {
            this.setState({
                height: `${this.textareaElement.scrollHeight}px`,
            });
        }
    }
    render() {
        const { resize, forwardedRef, ...rest } = this.props;
        const { height } = this.state;
        if (resize === 'smart') {
            return (React.createElement("textarea", Object.assign({ ref: this.getTextAreaRef, style: { height } }, rest, { onChange: this.handleOnChange })));
        }
        return (React.createElement("textarea", Object.assign({ ref: this.getTextAreaRef, style: { height: '100%' } }, rest)));
    }
}
//# sourceMappingURL=TextAreaElement.js.map