import React from 'react';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents, } from '@atlaskit/analytics-next';
import GlobalTheme from '@atlaskit/theme/components';
import { TextAreaWrapper } from '../styled';
import { Theme } from '../theme';
import { name as packageName, version as packageVersion, } from '../version.json';
import TextareaElement from './TextAreaElement';
class TextAreaWithoutForwardRef extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            isFocused: false,
        };
        this.handleOnBlur = event => {
            const { onBlur } = this.props;
            this.setState({ isFocused: false });
            if (onBlur) {
                onBlur(event);
            }
        };
        this.handleOnFocus = event => {
            const { onFocus } = this.props;
            this.setState({ isFocused: true });
            if (onFocus) {
                onFocus(event);
            }
        };
    }
    render() {
        const { createAnalyticsEvent, appearance, resize, isCompact, isDisabled, isInvalid, isReadOnly, isMonospaced, isRequired, minimumRows, maxHeight, theme, forwardedRef, testId, ...rest } = this.props;
        const { isFocused } = this.state;
        return (React.createElement(GlobalTheme.Consumer, null, ({ mode }) => (React.createElement(Theme.Provider, { value: theme },
            React.createElement(Theme.Consumer, { appearance: appearance, mode: mode }, (tokens) => (React.createElement(TextAreaWrapper, Object.assign({ resize: resize, maxHeight: maxHeight, appearance: appearance, isCompact: isCompact, isDisabled: isDisabled, isReadOnly: isReadOnly, isMonospaced: isMonospaced, isFocused: isFocused, isInvalid: isInvalid, minimumRows: minimumRows }, tokens),
                React.createElement(TextareaElement, Object.assign({ forwardedRef: forwardedRef, resize: resize, disabled: isDisabled, readOnly: isReadOnly, required: isRequired }, rest, { onFocus: this.handleOnFocus, onBlur: this.handleOnBlur, "data-testid": testId })))))))));
    }
}
TextAreaWithoutForwardRef.defaultProps = {
    resize: 'smart',
    appearance: 'standard',
    isCompact: false,
    isRequired: false,
    isReadOnly: false,
    isDisabled: false,
    isInvalid: false,
    isMonospaced: false,
    minimumRows: 1,
    maxHeight: '50vh',
    forwardedRef: () => { },
};
const TextArea = React.forwardRef((props, ref) => (
// Once Extract React Types is fixed to read from default exports we can
// move textareaRef instantiation to after the spread.
// as of now we do this to reduce the chance of users being misled into a breaking configuration
// by our documentation.
React.createElement(TextAreaWithoutForwardRef, Object.assign({ forwardedRef: ref }, props))));
export { TextArea as TextAreaWithoutAnalytics };
const createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
export default withAnalyticsContext({
    componentName: 'textArea',
    packageName,
    packageVersion,
})(withAnalyticsEvents({
    onBlur: createAndFireEventOnAtlaskit({
        action: 'blurred',
        actionSubject: 'textArea',
        attributes: {
            componentName: 'textArea',
            packageName,
            packageVersion,
        },
    }),
    onFocus: createAndFireEventOnAtlaskit({
        action: 'focused',
        actionSubject: 'textArea',
        attributes: {
            componentName: 'textArea',
            packageName,
            packageVersion,
        },
    }),
})(TextArea));
//# sourceMappingURL=TextArea.js.map