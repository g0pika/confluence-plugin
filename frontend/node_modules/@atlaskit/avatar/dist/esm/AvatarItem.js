import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _taggedTemplateLiteral from "@babel/runtime/helpers/taggedTemplateLiteral";
var _templateObject;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
/** @jsx jsx */
// eslint-disable-next-line @repo/internal/fs/filename-pattern-match
import { createElement, forwardRef, Fragment } from 'react';
import { ClassNames, css, jsx } from '@emotion/react';
import { B200, B50, N30 } from '@atlaskit/theme/colors';
import { borderRadius } from '@atlaskit/theme/constants';
import { BORDER_WIDTH } from './constants';
import Text from './Text';
import { getButtonProps, getCustomElement, getLinkProps } from './utilities';
var avatarItemStyles = css({
  minWidth: 0,
  maxWidth: '100%',
  flex: '1 1 100%',
  lineHeight: '1.4',
  paddingInlineStart: "var(--ds-space-100, 8px)"
});
var getStyles = function getStyles(css, _ref) {
  var backgroundColor = _ref.backgroundColor,
    isInteractive = _ref.isInteractive,
    isDisabled = _ref.isDisabled;
  return (// eslint-disable-next-line @atlaskit/design-system/ensure-design-token-usage, @repo/internal/react/no-css-string-literals
    css(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n    align-items: center;\n    background-color: ", ";\n    border-radius: ", "px;\n    border: ", "px solid transparent;\n    box-sizing: border-box;\n    color: inherit;\n    display: flex;\n    font-size: inherit;\n    font-style: normal;\n    font-weight: normal;\n    line-height: 1;\n    outline: none;\n    margin: ", ";\n    padding: ", ";\n    text-align: left;\n    text-decoration: none;\n    width: 100%;\n\n    ", "\n\n    ", "\n  "])), backgroundColor, borderRadius(), BORDER_WIDTH, "var(--ds-space-0, 0px)", "var(--ds-space-050, 4px)", isInteractive && "\n        :hover {\n          background-color: ".concat("var(--ds-background-neutral-subtle-hovered, ".concat(N30, ")"), ";\n          cursor: pointer;\n          text-decoration: none;\n        }\n\n        :focus {\n          outline: none;\n          border-color: ", "var(--ds-border-focused, ".concat(B200, ")"), ";\n        }\n\n        :active {\n          background-color: ", "var(--ds-background-neutral-subtle-pressed, ".concat(B50, ")"), ";\n        }\n      "), isDisabled && "\n        cursor: not-allowed;\n        opacity: ".concat("var(--ds-opacity-disabled, 0.5)", ";\n        pointer-events: none;\n      "))
  );
};

/**
 * __Avatar item__
 *
 * An avatar item is a wrapper that goes around an avatar when it's displayed alongside text, such as a name or status.
 *
 * - [Examples](https://atlassian.design/components/avatar/avatar-item/examples)
 * - [Code](https://atlassian.design/components/avatar/avatar-item/code)
 */
var AvatarItem = /*#__PURE__*/forwardRef(function (_ref2, ref) {
  var avatar = _ref2.avatar,
    _ref2$backgroundColor = _ref2.backgroundColor,
    backgroundColor = _ref2$backgroundColor === void 0 ? 'transparent' : _ref2$backgroundColor,
    children = _ref2.children,
    isTruncationDisabled = _ref2.isTruncationDisabled,
    href = _ref2.href,
    isDisabled = _ref2.isDisabled,
    onClick = _ref2.onClick,
    primaryText = _ref2.primaryText,
    secondaryText = _ref2.secondaryText,
    target = _ref2.target,
    testId = _ref2.testId,
    label = _ref2.label;
  var getTestId = function getTestId(testId, children) {
    return !children ? {
      'data-testid': "".concat(testId, "--itemInner")
    } : {
      testId: "".concat(testId, "--itemInner")
    };
  };
  var componentProps = function componentProps() {
    if (isDisabled) {
      return {
        disabled: true
      };
    }

    // return only relevant props for either anchor or button elements
    return _objectSpread(_objectSpread({}, href && getLinkProps(href, target)), onClick && !href ? getButtonProps(onClick) : {
      onClick: onClick
    });
  };
  return jsx(ClassNames, null, function (_ref3) {
    var css = _ref3.css;
    var props = _objectSpread(_objectSpread(_objectSpread(_objectSpread({
      ref: ref,
      className: getStyles(css, {
        backgroundColor: backgroundColor,
        isInteractive: Boolean(onClick || href),
        isDisabled: isDisabled
      })
    }, componentProps()), testId && getTestId(testId, children)), (onClick || href) && {
      'aria-label': label
    }), {}, {
      children: jsx(Fragment, null, avatar, jsx("div", {
        css: avatarItemStyles
      }, jsx(Text, {
        shouldTruncate: !isTruncationDisabled
      }, primaryText), jsx(Text, {
        isSecondary: true,
        shouldTruncate: !isTruncationDisabled
      }, secondaryText)))
    });
    return children ? children(props) : /*#__PURE__*/createElement(getCustomElement(isDisabled, href, onClick), props);
  });
});
AvatarItem.displayName = 'AvatarItem';
export default AvatarItem;