/** @jsx jsx */
// eslint-disable-next-line @repo/internal/fs/filename-pattern-match
import { createElement, forwardRef, isValidElement, useCallback, useEffect, useRef } from 'react';
import { ClassNames, jsx } from '@emotion/react';
import { useUIDSeed } from 'react-uid';
import { useAnalyticsEvents } from '@atlaskit/analytics-next';
import { B300, N0, N70A } from '@atlaskit/theme/colors';
import AvatarImage from './AvatarImage';
import { ACTIVE_SCALE_FACTOR, AVATAR_RADIUS, AVATAR_SIZES, BORDER_WIDTH } from './constants';
import { PresenceWrapper } from './Presence';
import { StatusWrapper } from './Status';
import { getButtonProps, getCustomElement, getLinkProps } from './utilities';
const packageName = "@atlaskit/avatar";
const packageVersion = "21.4.6";

// eslint-disable-next-line @repo/internal/react/consistent-types-definitions

const getStyles = (css, {
  size,
  radius,
  appearance,
  borderColor = `var(--ds-surface-overlay, ${N0})`,
  stackIndex,
  isInteractive,
  isDisabled
}) =>
//eslint-disable-next-line @repo/internal/react/no-css-string-literals
css`
    height: ${size}px;
    width: ${size}px;
    align-items: stretch;
    background-color: ${borderColor};
    border-radius: ${appearance === 'circle' ? '50%' : `${radius}px`};
    box-sizing: content-box;
    cursor: inherit;
    display: flex;
    flex-direction: column;
    justify-content: center;
    outline: none;
    overflow: hidden;
    position: static;
    transform: translateZ(0);
    transition: transform 200ms, opacity 200ms;
    box-shadow: 0 0 0 ${BORDER_WIDTH}px ${borderColor};
    border: none;
    margin: ${"var(--ds-space-025, 2px)"};
    padding: ${"var(--ds-space-0, 0px)"};

    /* Added font-size and font-family styles to fix alignment issue in firefox for interactive button avatar */
    font-size: inherit;
    font-family: inherit;

    &::-moz-focus-inner {
      border: 0;
      margin: ${"var(--ds-space-0, 0px)"};
      padding: ${"var(--ds-space-0, 0px)"};
    }

    &::after {
      background-color: transparent;
      inset: 0px;

      /* Added border-radius style to fix hover issue in safari */
      border-radius: ${appearance === 'circle' ? '50%' : `${radius}px`};
      content: ' ';
      opacity: 0;
      pointer-events: none;
      position: absolute;
      transition: opacity 200ms;
      width: 100%;
    }

    ${stackIndex && `position: relative;`}

    ${isInteractive && `
      cursor: pointer;

      :focus {
        outline: none;
        box-shadow: 0 0 0 ${BORDER_WIDTH}px ${`var(--ds-border-focused, ${B300})`}
      }

      :hover {
        &::after {
          background-color: ${`var(--ds-interaction-hovered, ${N70A})`};
          opacity: 1;
        }
      }

      :active {
        &::after {
          background-color: ${`var(--ds-interaction-pressed, ${N70A})`};
          opacity: 1;
        }
      }

      :active {
        transform: scale(${ACTIVE_SCALE_FACTOR});
      }

      @media screen and (forced-colors: active) {
        &:focus-visible {
          outline: 1px solid
        }
      }
    `}

    ${isDisabled && `
        cursor: not-allowed;

        &::after {
          opacity: ${"var(--ds-opacity-disabled, 0.7)"};
          pointer-events: none;
          background-color: ${`var(--ds-surface, ${N0})`};
        }
      `}
  `;

/**
 * An avatar is a visual representation of a user or entity.
 *
 * - [Examples](https://atlassian.design/components/avatar/examples)
 * - [Code](https://atlassian.design/components/avatar/code)
 * - [Usage](https://atlassian.design/components/avatar/usage).
 */
const Avatar = /*#__PURE__*/forwardRef(({
  analyticsContext,
  appearance = 'circle',
  label,
  borderColor,
  children,
  href,
  isDisabled,
  name,
  onClick,
  presence,
  size = 'medium',
  src,
  stackIndex,
  status,
  target,
  testId,
  as: AvatarContainer = 'div'
}, ref) => {
  const {
    createAnalyticsEvent
  } = useAnalyticsEvents();
  const customPresenceNode = /*#__PURE__*/isValidElement(presence) ? presence : null;
  const customStatusNode = /*#__PURE__*/isValidElement(status) ? status : null;
  const isValidIconSize = size !== 'xxlarge' && size !== 'xsmall';
  const lastAnalytics = useRef(analyticsContext);
  const uuid = useUIDSeed()('avatar');
  useEffect(() => {
    lastAnalytics.current = analyticsContext;
  }, [analyticsContext]);
  const onClickHandler = useCallback(event => {
    if (isDisabled || typeof onClick !== 'function') {
      return;
    }
    const analyticsEvent = createAnalyticsEvent({
      action: 'clicked',
      actionSubject: 'avatar',
      attributes: {
        componentName: 'avatar',
        packageName,
        packageVersion
      }
    });

    /**
     * To avoid wrapping this component in AnalyticsContext we manually
     * push the parent context's meta data into the context.
     */
    const context = {
      componentName: 'avatar',
      packageName,
      packageVersion,
      ...lastAnalytics.current
    };
    analyticsEvent.context.push(context);

    /**
     * Replicating the logic in the `withAnalyticsEvents` HOC.
     */
    const clone = analyticsEvent.clone();
    if (clone) {
      clone.fire('atlaskit');
    }
    onClick(event, analyticsEvent);
  }, [createAnalyticsEvent, isDisabled, onClick]);
  const getTestId = (testId, children) => !children ? {
    'data-testid': `${testId}--inner`
  } : {
    testId: `${testId}--inner`
  };
  const componentProps = () => {
    if (isDisabled) {
      return {
        disabled: true
      };
    }

    // return only relevant props for either anchor or button elements
    return {
      ...(href && getLinkProps(href, target)),
      ...(onClick && !href ? getButtonProps(onClickHandler) : {
        onClick
      })
    };
  };
  const isPresence = isValidIconSize && presence && !status;
  const isStatus = isValidIconSize && status;

  // add presence or status to the label by default if presence and status are passed as a string
  // if status or presence are nodes this is not added to the label by default
  const defaultLabel = [name, isStatus && !customStatusNode && `(${status})`, isPresence && !customPresenceNode && `(${presence})`].filter(Boolean).join(' ');
  const isInteractive = onClick || href || isDisabled;
  const containerShouldBeImage = Boolean(!isInteractive && defaultLabel);
  return jsx(AvatarContainer, {
    "data-testid": testId,
    role: containerShouldBeImage ? 'img' : undefined,
    "aria-labelledby": containerShouldBeImage ? `${uuid}-label` : undefined,
    style: {
      display: 'inline-block',
      position: 'relative',
      outline: 0,
      zIndex: stackIndex
    }
  }, jsx(ClassNames, null, ({
    css
  }) => {
    const props = {
      className: getStyles(css, {
        size: AVATAR_SIZES[size],
        radius: AVATAR_RADIUS[size],
        appearance,
        borderColor,
        stackIndex,
        isInteractive: Boolean(href || onClick) && !isDisabled,
        isDisabled
      }),
      ...componentProps(),
      ...(testId && getTestId(testId, children)),
      ...((isInteractive || children) && {
        'aria-label': label || defaultLabel
      }),
      children: jsx(AvatarImage
      // Only pass in the name if an image is provded and the
      // container is not being used as an `img` role
      , {
        alt: !containerShouldBeImage && src ? name : undefined,
        appearance: appearance,
        size: size,
        src: src,
        testId: testId
      }),
      ref
    };
    return children ? children(props) : /*#__PURE__*/createElement(getCustomElement(isDisabled, href, onClick), props);
  }), isPresence && jsx(PresenceWrapper, {
    appearance: appearance,
    size: size,
    presence: typeof presence === 'string' ? presence : undefined,
    testId: testId
  }, customPresenceNode), isStatus && jsx(StatusWrapper, {
    appearance: appearance,
    size: size,
    borderColor: borderColor,
    status: typeof status === 'string' ? status : undefined,
    testId: testId
  }, customStatusNode), containerShouldBeImage ? jsx("span", {
    id: `${uuid}-label`,
    hidden: true
  }, defaultLabel) : undefined);
});
Avatar.displayName = 'Avatar';
export default Avatar;