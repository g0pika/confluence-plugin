"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InProductTestCase = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var InProductTestCase = /*#__PURE__*/function () {
  function InProductTestCase(opts) {
    (0, _classCallCheck2.default)(this, InProductTestCase);
    this._id = opts.id;
    this._title = opts.title;
    this._assertions = opts.assertions;
    this._testOptions = opts.testOptions;
  }
  (0, _createClass2.default)(InProductTestCase, [{
    key: "assertions",
    get: function get() {
      if (this._precondition) {
        var succeeded = this._precondition();
        if (!succeeded) {
          throw new Error("Test execution for ".concat(this._id, " failed. You failed a precondition! \uD83D\uDE31"));
        }
      }
      return this._assertions;
    }
  }, {
    key: "shouldSkipTest",
    value: function shouldSkipTest() {
      var _this$_testOptions;
      var runOnly = (_this$_testOptions = this._testOptions) === null || _this$_testOptions === void 0 ? void 0 : _this$_testOptions.runOnly;
      if (runOnly) {
        if (!Array.isArray(runOnly)) {
          throw new Error('TestOpts.runOnly should be an array of IDs ðŸ™€.');
        }
        // Skip test if in list of IDs or do not (if it is not present).
        return runOnly.includes(this._id);
      }
      // By default, if not specified, don't skip any tests.
      return false;
    }
  }, {
    key: "test",
    value: function test(cy) {
      var _this = this;
      if (!this.shouldSkipTest()) {
        it(this._title, function () {
          _this._assertions(cy);
        });
      }
    }
  }]);
  return InProductTestCase;
}();
exports.InProductTestCase = InProductTestCase;