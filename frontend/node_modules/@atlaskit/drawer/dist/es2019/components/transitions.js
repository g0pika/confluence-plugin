import React, { Component } from 'react';
import { Transition } from 'react-transition-group';
import { layers } from '@atlaskit/theme/constants';
import { transitionDurationMs, transitionTimingFunction } from '../constants';
const defaultTransitionProps = {
    appear: true,
    mountOnEnter: true,
    unmountOnExit: true,
};
class TransitionHandler extends Component {
    constructor() {
        super(...arguments);
        this.onEntered = (node, isAppearing) => {
            const { onEntered } = this.props;
            if (onEntered) {
                // Delay onEntered callback to fix DS-6969
                // Can remove this hack with DS-7078
                this.enterTimeout = setTimeout(() => onEntered(node, isAppearing), transitionDurationMs);
            }
        };
        this.clearEnterTimeout = () => {
            if (this.enterTimeout) {
                clearTimeout(this.enterTimeout);
            }
        };
    }
    componentWillUnmount() {
        this.clearEnterTimeout();
    }
    render() {
        const { component = 'div', in: inProp, onExited, onEntered, defaultStyles, transitionStyles, transitionProps, ...props } = this.props;
        const timeout = {
            enter: 0,
            exit: transitionDurationMs,
        };
        return (React.createElement(Transition, Object.assign({ in: inProp, onExited: onExited, onExiting: this.clearEnterTimeout, onEntered: this.onEntered, timeout: timeout }, transitionProps), (state) => {
            const style = {
                ...defaultStyles,
                ...transitionStyles[state],
            };
            const Tag = component;
            return React.createElement(Tag, Object.assign({ style: style }, props));
        }));
    }
}
TransitionHandler.defaultProps = {
    component: 'div',
    transitionProps: defaultTransitionProps,
};
export const Fade = ({ ...props }) => (React.createElement(TransitionHandler, Object.assign({ defaultStyles: {
        transition: `opacity ${transitionDurationMs}ms ${transitionTimingFunction}`,
        opacity: 0,
        position: 'fixed',
        zIndex: layers.blanket(),
    }, transitionStyles: {
        entering: { opacity: 0 },
        entered: { opacity: 1 },
    } }, props)));
export const Slide = ({ shouldUnmountOnExit = true, ...props }) => (React.createElement(TransitionHandler, Object.assign({ defaultStyles: {
        transition: `transform ${transitionDurationMs}ms ${transitionTimingFunction}, ` +
            `width ${transitionDurationMs}ms ${transitionTimingFunction}`,
        transform: 'translate3d(-100%,0,0)',
    }, transitionStyles: {
        // Unset transform so we do not create a new stacking context for fixed-position children - NAV-159
        entered: { transform: null },
        exited: { transform: 'translate3d(-100%,0,0)' },
    }, transitionProps: {
        ...defaultTransitionProps,
        unmountOnExit: shouldUnmountOnExit,
    } }, props)));
//# sourceMappingURL=transitions.js.map