/** @jsx jsx */
import { Component } from 'react';
import { jsx } from '@emotion/core';
import ArrowLeft from '@atlaskit/icon/glyph/arrow-left';
import { B50, N0, N30A } from '@atlaskit/theme/colors';
import { gridSize, layers } from '@atlaskit/theme/constants';
import { Slide } from '../transitions';
import { createExtender } from '../utils';
import ContentOverrides from './content';
import SidebarOverrides from './sidebar';
// Misc.
// ------------------------------
const widths = {
    full: '100vw',
    extended: '95vw',
    narrow: 45 * gridSize(),
    medium: 60 * gridSize(),
    wide: 75 * gridSize(),
};
// Wrapper
// ------------------------------
const Wrapper = ({ width = 'narrow', shouldUnmountOnExit, ...props }) => {
    return (jsx("div", Object.assign({ css: {
            backgroundColor: N0,
            display: 'flex',
            height: '100vh',
            left: 0,
            overflow: 'hidden',
            position: 'fixed',
            top: 0,
            width: widths[width],
            zIndex: layers.blanket() + 1,
        } }, props)));
};
const IconWrapper = props => (jsx("button", Object.assign({ type: "button", css: {
        alignItems: 'center',
        background: 0,
        border: 0,
        borderRadius: '50%',
        color: 'inherit',
        cursor: props.onClick ? 'pointer' : undefined,
        display: 'flex',
        fontSize: 'inherit',
        height: 5 * gridSize(),
        justifyContent: 'center',
        lineHeight: 1,
        marginBottom: 2 * gridSize(),
        padding: 0,
        width: 5 * gridSize(),
        '&:hover': {
            backgroundColor: props.onClick ? N30A : undefined,
        },
        '&:active': {
            backgroundColor: props.onClick ? B50 : undefined,
            outline: 0,
        },
    } }, props)));
const defaults = {
    Sidebar: SidebarOverrides,
    Content: ContentOverrides,
};
export default class DrawerPrimitive extends Component {
    render() {
        const { children, icon: Icon, onClose, onCloseComplete, onOpenComplete, overrides, ...props } = this.props;
        const getOverrides = createExtender(defaults, overrides);
        const { component: Sidebar, ...sideBarOverrides } = getOverrides('Sidebar');
        const { component: Content, ...contentOverrides } = getOverrides('Content');
        return (jsx(Slide, Object.assign({ component: Wrapper, onExited: onCloseComplete, onEntered: onOpenComplete }, props),
            jsx(Sidebar, Object.assign({}, sideBarOverrides),
                jsx(IconWrapper, { onClick: onClose, "data-test-selector": "DrawerPrimitiveSidebarCloseButton" }, Icon ? jsx(Icon, { size: "large" }) : jsx(ArrowLeft, { label: "Close drawer" }))),
            jsx(Content, Object.assign({}, contentOverrides), children)));
    }
}
//# sourceMappingURL=index.js.map