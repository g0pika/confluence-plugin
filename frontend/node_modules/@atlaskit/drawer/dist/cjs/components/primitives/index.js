"use strict";
/** @jsx jsx */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = require("react");
var core_1 = require("@emotion/core");
var arrow_left_1 = tslib_1.__importDefault(require("@atlaskit/icon/glyph/arrow-left"));
var colors_1 = require("@atlaskit/theme/colors");
var constants_1 = require("@atlaskit/theme/constants");
var transitions_1 = require("../transitions");
var utils_1 = require("../utils");
var content_1 = tslib_1.__importDefault(require("./content"));
var sidebar_1 = tslib_1.__importDefault(require("./sidebar"));
// Misc.
// ------------------------------
var widths = {
    full: '100vw',
    extended: '95vw',
    narrow: 45 * constants_1.gridSize(),
    medium: 60 * constants_1.gridSize(),
    wide: 75 * constants_1.gridSize(),
};
// Wrapper
// ------------------------------
var Wrapper = function (_a) {
    var _b = _a.width, width = _b === void 0 ? 'narrow' : _b, shouldUnmountOnExit = _a.shouldUnmountOnExit, props = tslib_1.__rest(_a, ["width", "shouldUnmountOnExit"]);
    return (core_1.jsx("div", tslib_1.__assign({ css: {
            backgroundColor: colors_1.N0,
            display: 'flex',
            height: '100vh',
            left: 0,
            overflow: 'hidden',
            position: 'fixed',
            top: 0,
            width: widths[width],
            zIndex: constants_1.layers.blanket() + 1,
        } }, props)));
};
var IconWrapper = function (props) { return (core_1.jsx("button", tslib_1.__assign({ type: "button", css: {
        alignItems: 'center',
        background: 0,
        border: 0,
        borderRadius: '50%',
        color: 'inherit',
        cursor: props.onClick ? 'pointer' : undefined,
        display: 'flex',
        fontSize: 'inherit',
        height: 5 * constants_1.gridSize(),
        justifyContent: 'center',
        lineHeight: 1,
        marginBottom: 2 * constants_1.gridSize(),
        padding: 0,
        width: 5 * constants_1.gridSize(),
        '&:hover': {
            backgroundColor: props.onClick ? colors_1.N30A : undefined,
        },
        '&:active': {
            backgroundColor: props.onClick ? colors_1.B50 : undefined,
            outline: 0,
        },
    } }, props))); };
var defaults = {
    Sidebar: sidebar_1.default,
    Content: content_1.default,
};
var DrawerPrimitive = /** @class */ (function (_super) {
    tslib_1.__extends(DrawerPrimitive, _super);
    function DrawerPrimitive() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DrawerPrimitive.prototype.render = function () {
        var _a = this.props, children = _a.children, Icon = _a.icon, onClose = _a.onClose, onCloseComplete = _a.onCloseComplete, onOpenComplete = _a.onOpenComplete, overrides = _a.overrides, props = tslib_1.__rest(_a, ["children", "icon", "onClose", "onCloseComplete", "onOpenComplete", "overrides"]);
        var getOverrides = utils_1.createExtender(defaults, overrides);
        var _b = getOverrides('Sidebar'), Sidebar = _b.component, sideBarOverrides = tslib_1.__rest(_b, ["component"]);
        var _c = getOverrides('Content'), Content = _c.component, contentOverrides = tslib_1.__rest(_c, ["component"]);
        return (core_1.jsx(transitions_1.Slide, tslib_1.__assign({ component: Wrapper, onExited: onCloseComplete, onEntered: onOpenComplete }, props),
            core_1.jsx(Sidebar, tslib_1.__assign({}, sideBarOverrides),
                core_1.jsx(IconWrapper, { onClick: onClose, "data-test-selector": "DrawerPrimitiveSidebarCloseButton" }, Icon ? core_1.jsx(Icon, { size: "large" }) : core_1.jsx(arrow_left_1.default, { label: "Close drawer" }))),
            core_1.jsx(Content, tslib_1.__assign({}, contentOverrides), children)));
    };
    return DrawerPrimitive;
}(react_1.Component));
exports.default = DrawerPrimitive;
//# sourceMappingURL=index.js.map