import React, { Component } from 'react';
import { uid } from 'react-uid';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { Handle, Icon, IconWrapper, Inner, Input, Label, Slide, } from './styled';
import { name as packageName, version as packageVersion } from './version.json';
class ToggleStateless extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            isFocused: false,
        };
        this.handleBlur = event => {
            this.setState({ isFocused: false });
            this.props.onBlur(event);
        };
        this.handleFocus = event => {
            this.setState({ isFocused: true });
            this.props.onFocus(event);
        };
        this.handleChange = event => {
            if (this.props.isDisabled) {
                return;
            }
            this.props.onChange(event);
        };
    }
    render() {
        const { isChecked, isDisabled, label, name, size, value, testId, } = this.props;
        const { isFocused } = this.state;
        const styledProps = {
            isChecked,
            isDisabled,
            isFocused,
            size: size,
        };
        const id = uid({ id: this.constructor.name });
        return (React.createElement(Label, { htmlFor: id, "data-testid": testId },
            React.createElement(Input, { checked: isChecked, disabled: isDisabled, id: id, name: name, onBlur: this.handleBlur, onChange: this.handleChange, onFocus: this.handleFocus, type: "checkbox", value: value, "data-testid": testId && `${testId}--input` }),
            React.createElement(Slide, Object.assign({}, styledProps),
                React.createElement(Inner, Object.assign({}, styledProps),
                    React.createElement(Handle, { isChecked: isChecked, isDisabled: isDisabled, size: size }),
                    React.createElement(IconWrapper, { isChecked: isChecked, size: size, "aria-label": label || (isChecked ? 'Uncheck' : 'Check') },
                        React.createElement(Icon, { isChecked: isChecked, size: size }))))));
    }
}
ToggleStateless.defaultProps = {
    isDisabled: false,
    onBlur: () => { },
    onChange: () => { },
    onFocus: () => { },
    size: 'regular',
    label: '',
    name: '',
    value: '',
    isChecked: false,
};
export { ToggleStateless as ToggleStatelessWithoutAnalytics };
const createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
export default withAnalyticsContext({
    componentName: 'toggle',
    packageName,
    packageVersion,
})(withAnalyticsEvents({
    onBlur: createAndFireEventOnAtlaskit({
        action: 'blurred',
        actionSubject: 'toggle',
        attributes: {
            componentName: 'toggle',
            packageName,
            packageVersion,
        },
    }),
    onChange: createAndFireEventOnAtlaskit({
        action: 'changed',
        actionSubject: 'toggle',
        attributes: {
            componentName: 'toggle',
            packageName,
            packageVersion,
        },
    }),
    onFocus: createAndFireEventOnAtlaskit({
        action: 'focused',
        actionSubject: 'toggle',
        attributes: {
            componentName: 'toggle',
            packageName,
            packageVersion,
        },
    }),
})(ToggleStateless));
//# sourceMappingURL=ToggleStateless.js.map