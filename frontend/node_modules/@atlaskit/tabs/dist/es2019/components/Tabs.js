import React, { Component } from 'react';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { Tabs as StyledTabs } from '../styled';
import { name as packageName, version as packageVersion, } from '../version.json';
import DefaultTabContent from './TabContent';
import DefaultTabItem from './TabItem';
import TabsNavigation from './TabsNavigation';
const defaultIsSelectedTestNumber = (selectedIndex, _tab, tabIndex) => selectedIndex === tabIndex;
const defaultIsSelectedTestObject = (selected, tab) => selected === tab;
const defaultComponents = {
    Content: DefaultTabContent,
    Item: DefaultTabItem,
};
class Tabs extends Component {
    constructor(props) {
        super(props);
        this.resolveSelected = (selected, newProps) => {
            const { tabs, isSelectedTest } = newProps || this.props;
            const testFunction = (() => {
                if (isSelectedTest) {
                    return isSelectedTest;
                }
                if (typeof selected === 'number') {
                    return defaultIsSelectedTestNumber;
                }
                return defaultIsSelectedTestObject;
            })();
            return (tabs.find((tab, tabIndex) => testFunction(selected, tab, tabIndex)) ||
                tabs[0]);
        };
        this.onSelect = (newselected, newSelectedIndex) => {
            const { onSelect, selected } = this.props;
            if (typeof onSelect === 'function') {
                onSelect(newselected, newSelectedIndex);
            }
            if (typeof selected === 'undefined') {
                this.setState({ selected: newselected });
            }
        };
        const initiallyselected = this.props.selected || this.props.defaultSelected || this.props.tabs[0];
        const selected = this.resolveSelected(initiallyselected);
        this.state = {
            selected,
        };
    }
    UNSAFE_componentWillReceiveProps(newProps) {
        if (typeof newProps.selected !== 'undefined' &&
            newProps.selected !== this.state.selected) {
            const selected = this.resolveSelected(newProps.selected, newProps);
            this.setState({ selected });
        }
        else if (newProps.tabs !== this.props.tabs) {
            const updatedselected = this.resolveSelected(this.state.selected, newProps);
            this.setState({ selected: updatedselected });
        }
    }
    render() {
        const { components, tabs, testId } = this.props;
        const { selected } = this.state;
        const { Content, Item } = { ...defaultComponents, ...components };
        const contentProps = {
            data: selected,
            elementProps: {
                role: 'tabpanel',
            },
        };
        return (React.createElement(StyledTabs, { "data-testid": testId },
            React.createElement(TabsNavigation, { component: Item, onSelect: this.onSelect, selected: selected, tabs: tabs }),
            React.createElement(Content, Object.assign({}, contentProps))));
    }
}
Tabs.defaultProps = {
    components: {},
};
export { Tabs as TabsWithoutAnalytics };
const createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
export default withAnalyticsContext({
    componentName: 'tabs',
    packageName,
    packageVersion,
})(withAnalyticsEvents({
    onSelect: createAndFireEventOnAtlaskit({
        action: 'clicked',
        actionSubject: 'tab',
        attributes: {
            componentName: 'tabs',
            packageName,
            packageVersion,
        },
    }),
})(Tabs));
//# sourceMappingURL=Tabs.js.map