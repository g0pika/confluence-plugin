import React, { Component } from 'react';
import { Nav, NavLine, NavWrapper } from '../styled';
export default class TabsNavigation extends Component {
    constructor() {
        super(...arguments);
        this.elementRefs = [];
        this.tabKeyDownHandler = (e) => {
            if (!['ArrowRight', 'ArrowLeft'].includes(e.key)) {
                return;
            }
            const { selected, tabs } = this.props;
            const modifier = e.key === 'ArrowRight' ? 1 : -1;
            const newselectedIndex = tabs.indexOf(selected) + modifier;
            if (newselectedIndex < 0 || newselectedIndex >= tabs.length) {
                return;
            }
            this.onSelect(tabs[newselectedIndex], newselectedIndex);
            this.elementRefs[newselectedIndex].focus();
        };
        this.onSelect = (selected, selectedIndex) => {
            this.props.onSelect(selected, selectedIndex);
        };
        this.tabMouseDownHandler = (e) => e.preventDefault();
    }
    UNSAFE_componentWillReceiveProps(newProps) {
        if (newProps.tabs !== this.props.tabs) {
            this.elementRefs = [];
        }
    }
    render() {
        const { selected, component: Item, tabs } = this.props;
        return (React.createElement(NavWrapper, null,
            React.createElement(NavLine, { status: "normal" }),
            React.createElement(Nav, { role: "tablist" }, tabs.map((tab, index) => {
                const isSelected = tab === selected;
                const elementProps = {
                    'aria-posinset': index + 1,
                    'aria-selected': isSelected,
                    'aria-setsize': tabs.length,
                    'data-testid': tab.testId,
                    onClick: () => this.onSelect(tab, index),
                    onKeyDown: this.tabKeyDownHandler,
                    onMouseDown: this.tabMouseDownHandler,
                    role: 'tab',
                    tabIndex: isSelected ? 0 : -1,
                };
                const innerRef = (ref) => {
                    this.elementRefs[index] = ref;
                };
                const itemProps = {
                    elementProps,
                    innerRef,
                    data: tab,
                    isSelected,
                };
                // eslint-disable-next-line react/no-array-index-key
                return React.createElement(Item, Object.assign({ key: index }, itemProps));
            }))));
    }
}
//# sourceMappingURL=TabsNavigation.js.map