import React from 'react';
import { reorderRows } from '../internal/helpers';
import DynamicTableStateless from './Stateless';
export default class DynamicTable extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            page: this.props.defaultPage,
            sortKey: this.props.defaultSortKey,
            sortOrder: this.props.defaultSortOrder,
            rows: this.props.rows,
        };
        this.onSetPage = (page, analyticsEvent) => {
            const { onSetPage } = this.props;
            if (onSetPage) {
                onSetPage(page, analyticsEvent);
                this.setState({ page });
            }
        };
        this.onSort = ({ key, item, sortOrder }, analyticsEvent) => {
            const { onSort } = this.props;
            if (onSort) {
                onSort({ key, item, sortOrder }, analyticsEvent);
                this.setState({ sortKey: key, sortOrder });
            }
        };
        this.onRankEndIfExists = (params) => {
            if (this.props.onRankEnd) {
                this.props.onRankEnd(params);
            }
        };
        this.onRankEnd = (params) => {
            const { destination } = params;
            const { rows, page } = this.state;
            const { rowsPerPage } = this.props;
            if (!destination || !rows) {
                this.onRankEndIfExists(params);
                return;
            }
            const reordered = reorderRows(params, rows, page, rowsPerPage);
            this.setState({
                rows: reordered,
            });
            this.onRankEndIfExists(params);
        };
    }
    UNSAFE_componentWillReceiveProps(newProps) {
        const sortKey = newProps.sortKey || this.state.sortKey;
        const sortOrder = newProps.sortOrder || this.state.sortOrder;
        const page = newProps.page || this.state.page;
        this.setState({
            page,
            sortKey,
            sortOrder,
            rows: newProps.rows,
        });
    }
    render() {
        const { page, sortKey, sortOrder, rows } = this.state;
        const { caption, emptyView, head, highlightedRowIndex, loadingSpinnerSize, isLoading, isFixedSize, isRankable, isRankingDisabled, rowsPerPage, paginationi18n, onRankStart, onPageRowsUpdate, testId, } = this.props;
        return (React.createElement(DynamicTableStateless, { paginationi18n: paginationi18n, caption: caption, emptyView: emptyView, head: head, highlightedRowIndex: highlightedRowIndex, loadingSpinnerSize: loadingSpinnerSize, isLoading: isLoading, isFixedSize: isFixedSize, onSetPage: this.onSetPage, onSort: this.onSort, page: page, rows: rows, rowsPerPage: rowsPerPage, sortKey: sortKey, sortOrder: sortOrder, isRankable: isRankable, isRankingDisabled: isRankingDisabled, onRankEnd: this.onRankEnd, onRankStart: onRankStart, onPageRowsUpdate: onPageRowsUpdate, testId: testId }));
    }
}
DynamicTable.defaultProps = {
    defaultPage: 1,
    isLoading: false,
    isFixedSize: false,
    isRankable: false,
    onSetPage: () => { },
    onSort: () => { },
    rowsPerPage: Infinity,
};
//# sourceMappingURL=Stateful.js.map