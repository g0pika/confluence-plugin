import React from 'react';
import { validateSortKey } from '../internal/helpers';
import { Head } from '../styled/TableHead';
import RankableHeadCell from './rankable/TableHeadCell';
import HeadCell from './TableHeadCell';
class TableHead extends React.Component {
    constructor() {
        super(...arguments);
        this.canSortOnEnterPressed = (e, isSortable) => isSortable && e.key === 'Enter';
    }
    UNSAFE_componentWillMount() {
        validateSortKey(this.props.sortKey, this.props.head);
    }
    UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.props.sortKey !== nextProps.sortKey ||
            this.props.head !== nextProps.head) {
            validateSortKey(nextProps.sortKey, nextProps.head);
        }
    }
    render() {
        const { head, sortKey, sortOrder, isFixedSize, onSort, isRanking, isRankable, testId, } = this.props;
        if (!head) {
            return null;
        }
        const HeadCellComponent = isRankable ? RankableHeadCell : HeadCell;
        const { cells, ...rest } = head;
        return (React.createElement(Head, Object.assign({}, rest, { isRanking: isRanking, "data-testid": testId && `${testId}--head` }),
            React.createElement("tr", null, cells.map((cell, index) => {
                const { isSortable, key, ...restCellProps } = cell;
                return (React.createElement(HeadCellComponent, Object.assign({ isFixedSize: isFixedSize, isSortable: !!isSortable, isRanking: isRanking, key: key || index, onClick: isSortable ? onSort(cell) : undefined, onKeyDown: (e) => this.canSortOnEnterPressed(e, isSortable)
                        ? onSort(cell)()
                        : undefined, testId: testId, sortOrder: key === sortKey ? sortOrder : undefined }, restCellProps)));
            }))));
    }
}
export default TableHead;
//# sourceMappingURL=TableHead.js.map