import React from 'react';
import { Draggable } from 'react-beautiful-dnd';
import withDimensions from '../../hoc/withDimensions';
import { inlineStylesIfRanking } from '../../internal/helpers';
import { RankableTableBodyRow } from '../../styled/rankable/TableRow';
import TableCell from './TableCell';
export class RankableTableRow extends React.Component {
    constructor() {
        super(...arguments);
        this.innerRef = (innerRefFn) => (ref) => {
            innerRefFn(ref);
            if (this.props.innerRef) {
                this.props.innerRef(ref);
            }
        };
    }
    render() {
        const { row, head, isFixedSize, isRanking, refWidth, rowIndex, isRankingDisabled, isHighlighted, testId, } = this.props;
        const { cells, key, ...restRowProps } = row;
        const inlineStyles = inlineStylesIfRanking(isRanking, refWidth);
        if (typeof key !== 'string' && !isRankingDisabled) {
            throw new Error('dynamic-table: ranking is not possible because table row does not have a key. Add the key to the row or disable ranking.');
        }
        return (React.createElement(Draggable, { draggableId: key || `${rowIndex}`, index: rowIndex, isDragDisabled: isRankingDisabled }, (provided, snapshot) => (React.createElement(RankableTableBodyRow, Object.assign({}, restRowProps, provided.dragHandleProps, provided.draggableProps, { innerRef: this.innerRef(provided.innerRef), style: { ...provided.draggableProps.style, ...inlineStyles }, isHighlighted: isHighlighted, isRanking: isRanking, isRankingItem: snapshot.isDragging }), cells.map((cell, cellIndex) => {
            const headCell = (head || { cells: [] }).cells[cellIndex];
            return (React.createElement(TableCell, { head: headCell, cell: cell, isRanking: isRanking, key: cell.key || cellIndex, isFixedSize: isFixedSize, testId: testId }));
        })))));
    }
}
export default withDimensions(RankableTableRow);
//# sourceMappingURL=TableRow.js.map