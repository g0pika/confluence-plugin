import React from 'react';
import { DragDropContext, Droppable, } from 'react-beautiful-dnd';
import withSortedPageRows from '../../hoc/withSortedPageRows';
import TableRow from './TableRow';
// computes destination of ranking
// - if drag was cancelled returns undefined
// - if drag was finished, returns new position and after/before key
const computeRankDestination = (result, pageRows) => {
    const { source: { index: sourceIndex }, destination, } = result;
    if (destination) {
        const { index } = destination;
        const keyIndex = index < sourceIndex ? index - 1 : index;
        const afterKey = keyIndex !== -1 ? pageRows[keyIndex].key : undefined;
        const beforeIndex = keyIndex === -1 ? 0 : keyIndex + 1;
        const beforeKey = beforeIndex < pageRows.length ? pageRows[beforeIndex].key : undefined;
        return {
            index,
            afterKey,
            beforeKey,
        };
    }
    return undefined;
};
export class RankableBody extends React.Component {
    constructor() {
        super(...arguments);
        this.onBeforeDragStart = (dragStart) => {
            const { draggableId: key, source: { index }, } = dragStart;
            const rankStartProps = {
                index,
                key,
            };
            this.props.onRankStart(rankStartProps);
        };
        this.onDragEnd = (result) => {
            const { pageRows, onRankEnd } = this.props;
            const { draggableId: sourceKey, source: { index: sourceIndex }, } = result;
            const destination = computeRankDestination(result, pageRows);
            const rankEndProps = {
                sourceIndex,
                sourceKey,
                destination,
            };
            onRankEnd(rankEndProps);
        };
    }
    render() {
        const { highlightedRowIndex, pageRows, head, isFixedSize, isRanking, isRankingDisabled, testId, } = this.props;
        return (React.createElement(DragDropContext, { onBeforeDragStart: this.onBeforeDragStart, onDragEnd: this.onDragEnd },
            React.createElement(Droppable, { droppableId: "dynamic-table-droppable", isDropDisabled: isRankingDisabled }, provided => (React.createElement("tbody", Object.assign({ "data-testid": testId, ref: provided.innerRef }, provided.droppableProps),
                pageRows.map((row, rowIndex) => (React.createElement(TableRow, { head: head, isRanking: isRanking, isFixedSize: isFixedSize, key: row.key, rowIndex: rowIndex, row: row, isRankingDisabled: isRankingDisabled, isHighlighted: highlightedRowIndex === rowIndex }))),
                provided.placeholder)))));
    }
}
export default withSortedPageRows(RankableBody);
//# sourceMappingURL=Body.js.map