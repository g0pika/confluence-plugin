import React from 'react';
// Compute height and width of wrapped component before ranking
export default function withDimensions(WrappedComponent) {
    return class WithDimensions extends React.Component {
        constructor() {
            super(...arguments);
            this.state = {
                refWidth: 0,
                refHeight: 0,
            };
            this.innerRef = (ref) => {
                if (ref && !this.props.isRanking) {
                    this.ref = ref;
                }
            };
            this.updateDimensions = () => {
                if (!this.ref) {
                    return;
                }
                const clientRect = this.ref.getBoundingClientRect();
                const { width } = clientRect;
                const { height } = clientRect;
                if (width !== this.state.refWidth || height !== this.state.refHeight) {
                    this.setState({ refWidth: width, refHeight: height });
                }
            };
        }
        UNSAFE_componentWillReceiveProps(nextProps) {
            const wasRanking = this.props.isRanking;
            const willRanking = nextProps.isRanking;
            if (willRanking && !wasRanking) {
                this.updateDimensions();
            }
        }
        render() {
            const { refWidth, refHeight } = this.state;
            return (React.createElement(WrappedComponent, Object.assign({ refWidth: refWidth, refHeight: refHeight, innerRef: this.innerRef }, this.props)));
        }
    };
}
//# sourceMappingURL=withDimensions.js.map