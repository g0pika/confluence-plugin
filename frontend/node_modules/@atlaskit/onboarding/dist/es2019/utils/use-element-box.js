import { useEffect, useLayoutEffect, useState } from 'react';
const getElementRect = (element) => {
    const { height, left, top, width } = element.getBoundingClientRect();
    return {
        height,
        left,
        top,
        width,
    };
};
/**
 * Will listen to the document resizing to see if an element has moved positions.
 * Not using ResizeObserver because of IE11 support.
 * @param element HTMLElement to watch when resizing.
 */
export const useElementBox = (element) => {
    const [box, setBox] = useState({
        width: 0,
        height: 0,
        left: 0,
        top: 0,
    });
    useLayoutEffect(() => {
        setBox(getElementRect(element));
    }, [element]);
    useEffect(() => {
        const onResize = () => {
            requestAnimationFrame(() => {
                setBox(getElementRect(element));
            });
        };
        window.addEventListener('resize', onResize);
        return () => {
            window.removeEventListener('resize', onResize);
        };
    }, [element]);
    return box;
};
export const ElementBox = (props) => {
    const box = useElementBox(props.element);
    return props.children(box);
};
//# sourceMappingURL=use-element-box.js.map