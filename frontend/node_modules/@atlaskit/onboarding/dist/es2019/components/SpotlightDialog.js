import React, { Component } from 'react';
import FocusLock from 'react-focus-lock';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents, } from '@atlaskit/analytics-next';
import { Popper } from '@atlaskit/popper';
import { Image } from '../styled/Dialog';
import { name as packageName, version as packageVersion, } from '../version.json';
import SpotlightCard from './SpotlightCard';
import ValueChanged from './ValueChanged';
class SpotlightDialog extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            focusLockDisabled: true,
        };
    }
    componentDidMount() {
        this.focusLockTimeoutId = window.setTimeout(() => {
            // we delay the enabling of the focus lock to avoid the scroll position
            // jumping around in some situations
            this.setState({ focusLockDisabled: false });
        }, 200);
    }
    componentWillUnmount() {
        window.clearTimeout(this.focusLockTimeoutId);
    }
    render() {
        const { actions, actionsBeforeElement, animationStyles, children, dialogPlacement, dialogWidth, footer, header, heading, image, targetNode, testId, } = this.props;
        const { focusLockDisabled } = this.state;
        const translatedPlacement = dialogPlacement
            ? {
                'top left': 'top-start',
                'top center': 'top',
                'top right': 'top-end',
                'right top': 'right-start',
                'right middle': 'right',
                'right bottom': 'right-end',
                'bottom left': 'bottom-start',
                'bottom center': 'bottom',
                'bottom right': 'bottom-end',
                'left top': 'left-start',
                'left middle': 'left',
                'left bottom': 'left-end',
            }[dialogPlacement]
            : undefined;
        return (React.createElement(Popper, { referenceElement: targetNode, placement: translatedPlacement }, ({ ref, style, scheduleUpdate }) => (React.createElement(ValueChanged, { value: dialogWidth, onChange: scheduleUpdate },
            React.createElement(FocusLock, { disabled: focusLockDisabled, returnFocus: false, autoFocus: true },
                React.createElement(SpotlightCard, { ref: ref, testId: testId, theme: parent => {
                        const { container, ...others } = parent({});
                        return {
                            ...others,
                            container: {
                                ...container,
                                ...style,
                                ...animationStyles,
                            },
                        };
                    }, width: dialogWidth, actions: actions, actionsBeforeElement: actionsBeforeElement, image: image && React.createElement(Image, { alt: heading, src: image }), components: {
                        Header: header,
                        Footer: footer,
                    }, heading: heading }, children))))));
    }
}
const createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
export default withAnalyticsContext({
    componentName: 'spotlight',
    packageName,
    packageVersion,
})(withAnalyticsEvents({
    targetOnClick: createAndFireEventOnAtlaskit({
        action: 'clicked',
        actionSubject: 'spotlight',
        attributes: {
            componentName: 'spotlight',
            packageName,
            packageVersion,
        },
    }),
})(SpotlightDialog));
//# sourceMappingURL=SpotlightDialog.js.map