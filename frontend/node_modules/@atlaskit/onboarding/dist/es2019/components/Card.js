import React from 'react';
import styled from 'styled-components';
import Button from '@atlaskit/button';
import { createTheme } from '@atlaskit/theme/components';
import { borderRadius, gridSize, layers } from '@atlaskit/theme/constants';
import { multiply } from '@atlaskit/theme/math';
import { h600 } from '@atlaskit/theme/typography';
import { ActionItem, ActionItems } from '../styled/Dialog';
const Container = styled.div `
  ${({ theme }) => theme};
`;
const Body = styled.div `
  display: flex;
  flex-direction: column;
  padding: ${multiply(gridSize, 2)}px ${multiply(gridSize, 2.5)}px;
`;
const Heading = styled.h4 `
  ${h600};
  color: inherit;
`;
const DefaultHeader = styled.div `
  display: flex;
  justify-content: space-between;
  align-items: baseline;
  padding-bottom: ${gridSize}px;
`;
const DefaultFooter = styled.div `
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-top: ${gridSize}px;
`;
const Theme = createTheme(() => ({
    container: {
        overflow: 'auto',
        borderRadius: `${borderRadius()}px`,
        height: 'fit-content',
        zIndex: `${layers.spotlight() + 1}`,
    },
}));
const Card = ({ actions = [], actionsBeforeElement, children, components = {}, image, heading, headingAfterElement, theme, innerRef, testId, }) => {
    const { Header = DefaultHeader, Footer = DefaultFooter } = components;
    return (React.createElement(Theme.Provider, { value: theme },
        React.createElement(Theme.Consumer, null, ({ container }) => {
            return (React.createElement(Container, { theme: container, innerRef: innerRef, "data-testid": testId },
                typeof image === 'string' ? React.createElement("img", { src: image, alt: "" }) : image,
                React.createElement(Body, null,
                    heading || headingAfterElement ? (React.createElement(Header, null,
                        React.createElement(Heading, null, heading),
                        headingAfterElement || React.createElement("span", null))) : null,
                    children,
                    actions.length > 0 || actionsBeforeElement ? (React.createElement(Footer, null,
                        actionsBeforeElement || React.createElement("span", null),
                        React.createElement(ActionItems, null, actions.map(({ text, key, ...rest }, idx) => {
                            return (React.createElement(ActionItem, { key: key ||
                                    (typeof text === 'string' ? text : `${idx}`) },
                                React.createElement(Button, Object.assign({}, rest), text)));
                        })))) : null)));
        })));
};
export default React.forwardRef((props, ref) => (React.createElement(Card, Object.assign({}, props, { innerRef: ref }))));
//# sourceMappingURL=Card.js.map