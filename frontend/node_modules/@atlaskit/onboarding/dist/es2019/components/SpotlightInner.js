import React from 'react';
import { canUseDOM } from 'exenv';
import NodeResovler from 'react-node-resolver';
import ScrollLock from 'react-scrolllock';
import scrollIntoView from 'scroll-into-view-if-needed';
import Portal from '@atlaskit/portal';
import { layers } from '@atlaskit/theme/constants';
import { ElementBox } from '../utils/use-element-box';
import { Fade } from './Animation';
import Clone from './Clone';
import SpotlightDialog from './SpotlightDialog';
import { SpotlightTransitionConsumer } from './SpotlightTransition';
class SpotlightInner extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            // This is only used when targetReplacement is specified.
            // In this case, we have to render the targetReplacement component,
            // get a dom reference from that component, then render again passing
            // that reference into SpotlightDialog (Popper).
            replacementElement: null,
        };
        this.getTargetNodeStyle = (box) => {
            if (!canUseDOM) {
                return {};
            }
            return {
                ...box,
                position: 'fixed',
            };
        };
    }
    componentDidUpdate(prevProps) {
        if (prevProps.targetNode !== this.props.targetNode) {
            scrollIntoView(this.props.targetNode, {
                scrollMode: 'if-needed',
            });
        }
    }
    componentDidMount() {
        scrollIntoView(this.props.targetNode, {
            scrollMode: 'if-needed',
        });
        this.props.onOpened();
    }
    componentWillUnmount() {
        this.props.onClosed();
    }
    render() {
        const { pulse, target, targetNode, targetBgColor, targetOnClick, targetRadius, testId, targetReplacement: TargetReplacement, } = this.props;
        const { replacementElement } = this.state;
        return (React.createElement(SpotlightTransitionConsumer, null, ({ isOpen, onExited }) => (React.createElement(Portal, { zIndex: layers.spotlight() + 1 },
            TargetReplacement ? (React.createElement(NodeResovler, { innerRef: (elem) => this.setState({ replacementElement: elem }) },
                React.createElement(ElementBox, { element: targetNode }, box => (React.createElement(TargetReplacement, Object.assign({ "data-testid": `${testId}--target` }, this.getTargetNodeStyle(box))))))) : (React.createElement(ElementBox, { element: targetNode }, box => (React.createElement(Clone, { testId: `${testId}--target`, pulse: pulse, target: target, style: this.getTargetNodeStyle(box), targetBgColor: targetBgColor, targetNode: targetNode, targetOnClick: targetOnClick, targetRadius: targetRadius })))),
            TargetReplacement && !replacementElement ? null : (React.createElement(Fade, { in: isOpen, onExited: onExited }, animationStyles => (React.createElement(SpotlightDialog, { testId: `${testId}--dialog`, actions: this.props.actions, actionsBeforeElement: this.props.actionsBeforeElement, children: this.props.children, dialogPlacement: this.props.dialogPlacement, dialogWidth: this.props.dialogWidth, footer: this.props.footer, header: this.props.header, heading: this.props.heading, image: this.props.image, targetNode: replacementElement || targetNode, animationStyles: animationStyles })))),
            React.createElement(ScrollLock, null)))));
    }
}
SpotlightInner.defaultProps = {
    dialogWidth: 400,
    pulse: true,
};
export default SpotlightInner;
//# sourceMappingURL=SpotlightInner.js.map