import React, { createContext, PureComponent, } from 'react';
import memoizeOne from 'memoize-one';
import Portal from '@atlaskit/portal';
import { layers } from '@atlaskit/theme/constants';
import Blanket from '../styled/Blanket';
import { Fade } from './Animation';
const noop = () => { };
const { Consumer: TargetConsumer, Provider: TargetProvider } = createContext(undefined);
const { Consumer: SpotlightStateConsumer, Provider: SpotlightStateProvider, } = createContext({
    opened: noop,
    closed: noop,
    targets: {},
});
export { TargetConsumer };
export { SpotlightStateConsumer as SpotlightConsumer };
const Container = ({ component: Wrapper, children, }) => React.createElement(Wrapper, null, children);
export default class SpotlightManager extends PureComponent {
    constructor() {
        super(...arguments);
        this.state = {
            spotlightCount: 0,
            targets: {},
        };
        this.targetRef = (name) => (element) => {
            this.setState(state => ({
                targets: {
                    ...state.targets,
                    [name]: element || undefined,
                },
            }));
        };
        this.spotlightOpen = () => {
            this.setState(state => ({ spotlightCount: state.spotlightCount + 1 }));
        };
        this.spotlightClose = () => {
            this.setState(state => ({ spotlightCount: state.spotlightCount - 1 }));
        };
        this.getStateProviderValue = memoizeOne(targets => ({
            opened: this.spotlightOpen,
            closed: this.spotlightClose,
            targets,
        }));
    }
    componentDidMount() {
        if (process.env.NODE_ENV !== 'production' && !process.env.CI) {
            if (this.props.component) {
                // eslint-disable-next-line no-console
                console.warn(`Atlaskit: The SpotlightManager 'component' prop is deprecated. Please wrap the SpotlightManager in the component instead.`);
            }
        }
    }
    render() {
        const { blanketIsTinted, children, component: Tag } = this.props;
        return (React.createElement(SpotlightStateProvider, { value: this.getStateProviderValue(this.state.targets) },
            React.createElement(TargetProvider, { value: this.targetRef },
                React.createElement(Container, { component: Tag || React.Fragment },
                    React.createElement(Fade, { in: this.state.spotlightCount > 0 }, animationStyles => (React.createElement(Portal, { zIndex: layers.spotlight() },
                        React.createElement(Blanket, { style: animationStyles, isTinted: blanketIsTinted })))),
                    children))));
    }
}
SpotlightManager.defaultProps = {
    blanketIsTinted: true,
};
//# sourceMappingURL=SpotlightManager.js.map