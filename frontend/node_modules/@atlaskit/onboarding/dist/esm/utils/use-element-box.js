import { __read } from "tslib";
import { useEffect, useLayoutEffect, useState } from 'react';
var getElementRect = function (element) {
    var _a = element.getBoundingClientRect(), height = _a.height, left = _a.left, top = _a.top, width = _a.width;
    return {
        height: height,
        left: left,
        top: top,
        width: width,
    };
};
/**
 * Will listen to the document resizing to see if an element has moved positions.
 * Not using ResizeObserver because of IE11 support.
 * @param element HTMLElement to watch when resizing.
 */
export var useElementBox = function (element) {
    var _a = __read(useState({
        width: 0,
        height: 0,
        left: 0,
        top: 0,
    }), 2), box = _a[0], setBox = _a[1];
    useLayoutEffect(function () {
        setBox(getElementRect(element));
    }, [element]);
    useEffect(function () {
        var onResize = function () {
            requestAnimationFrame(function () {
                setBox(getElementRect(element));
            });
        };
        window.addEventListener('resize', onResize);
        return function () {
            window.removeEventListener('resize', onResize);
        };
    }, [element]);
    return box;
};
export var ElementBox = function (props) {
    var box = useElementBox(props.element);
    return props.children(box);
};
//# sourceMappingURL=use-element-box.js.map