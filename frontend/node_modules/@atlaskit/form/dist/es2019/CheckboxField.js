import React, { useCallback } from 'react';
import Field from './Field';
const CheckboxField = props => {
    const { children, defaultIsChecked = false, value, ...rest } = props;
    // Maintains a memoised list of the default values
    const defaultValue = useCallback((currentValue = []) => defaultIsChecked && value !== undefined
        ? [...currentValue, value]
        : currentValue, [value, defaultIsChecked]);
    return value !== undefined ? (React.createElement(Field, Object.assign({}, rest, { defaultValue: defaultValue, transform: (event, currentValue) => event.currentTarget.checked && currentValue
            ? [...currentValue, value]
            : currentValue.filter(v => v !== value) }), ({ fieldProps: { value: fieldValue, ...otherFieldProps }, ...others }) => children({
        fieldProps: {
            ...otherFieldProps,
            isChecked: !!fieldValue.find((v) => v === value),
            value,
        },
        ...others,
    }))) : (React.createElement(Field, Object.assign({}, rest, { defaultValue: defaultIsChecked, transform: event => event.currentTarget.checked }), ({ fieldProps: { value: fieldValue, ...otherFieldProps }, ...others }) => children({
        fieldProps: {
            ...otherFieldProps,
            isChecked: fieldValue,
            value,
        },
        ...others,
    })));
};
CheckboxField.defaultProps = {
    defaultIsChecked: false,
};
export default CheckboxField;
//# sourceMappingURL=CheckboxField.js.map