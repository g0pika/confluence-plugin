import React, { createContext, useCallback, useEffect, useRef, useState, } from 'react';
import { createForm, } from 'final-form';
import createDecorator from 'final-form-focus';
import set from 'lodash.set';
export const FormContext = createContext(function () {
    return () => { };
});
export const IsDisabledContext = createContext(false);
function Form(props) {
    const formRef = useRef(null);
    const onSubmitRef = useRef(props.onSubmit);
    onSubmitRef.current = props.onSubmit;
    const form = useState(() => {
        const finalForm = createForm({
            onSubmit: (...args) => onSubmitRef.current(...args),
            destroyOnUnregister: true,
            initialValues: {},
            mutators: {
                setDefaultValue: ([name, defaultValue], state) => {
                    if (state.formState.initialValues) {
                        const initialValues = state.formState.initialValues;
                        const values = state.formState.values;
                        const value = name && typeof defaultValue === 'function'
                            ? defaultValue(initialValues[name])
                            : defaultValue;
                        /* eslint-disable no-param-reassign */
                        set(initialValues, name, value);
                        set(values, name, value);
                        /* eslint-enable */
                    }
                },
            },
        });
        createDecorator(() => formRef.current
            ? Array.from(formRef.current.querySelectorAll('input'))
            : [])(finalForm);
        return finalForm;
    })[0];
    const [state, setState] = useState({
        dirty: false,
        submitting: false,
    });
    useEffect(() => {
        const unsubscribe = form.subscribe(({ dirty, submitting }) => {
            setState({ dirty, submitting });
        }, {
            dirty: true,
            submitting: true,
        });
        return unsubscribe;
    }, [form]);
    const registerField = useCallback((name, defaultValue, subscriber, subscription, config) => {
        form.pauseValidation();
        const unsubscribe = form.registerField(name, subscriber, subscription, config);
        form.mutators.setDefaultValue(name, defaultValue);
        form.resumeValidation();
        return unsubscribe;
    }, [form]);
    const handleSubmit = (e) => {
        if (e) {
            e.preventDefault();
        }
        form.submit();
    };
    const handleReset = (initialValues) => {
        form.reset(initialValues);
    };
    const handleKeyDown = (e) => {
        if (e.key === 'Enter' && (e.ctrlKey || e.metaKey) && formRef.current) {
            const submitButton = formRef.current.querySelector('button:not([type]), button[type="submit"], input[type="submit"]');
            if (submitButton)
                submitButton.click();
            e.preventDefault();
        }
    };
    const { isDisabled = false, children } = props;
    const { dirty, submitting } = state;
    return (React.createElement(FormContext.Provider, { value: registerField },
        React.createElement(IsDisabledContext.Provider, { value: isDisabled }, children({
            formProps: {
                onSubmit: handleSubmit,
                ref: formRef,
                onKeyDown: handleKeyDown,
            },
            dirty,
            reset: handleReset,
            submitting,
            disabled: isDisabled,
            getValues: () => form.getState().values,
            setFieldValue: form.change,
        }))));
}
export default Form;
//# sourceMappingURL=Form.js.map