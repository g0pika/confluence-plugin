import React, { FormEvent, ReactNode } from 'react';
declare type SupportedElements = HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
export interface FieldProps<FieldValue, Element extends SupportedElements = HTMLInputElement> {
    id: string;
    isRequired: boolean;
    isDisabled: boolean;
    isInvalid: boolean;
    onChange: (value: FormEvent<Element> | FieldValue) => void;
    onBlur: () => void;
    onFocus: () => void;
    value: FieldValue;
    name: string;
    'aria-invalid': 'true' | 'false';
    'aria-labelledby': string;
}
export interface Meta {
    dirty: boolean;
    dirtySinceLastSubmit: boolean;
    submitFailed: boolean;
    submitting: boolean;
    touched: boolean;
    valid: boolean;
    error?: string;
    submitError?: boolean;
}
interface Props<FieldValue, Element extends SupportedElements> {
    children: (args: {
        fieldProps: FieldProps<FieldValue, Element>;
        error?: string;
        valid: boolean;
        meta: Meta;
    }) => React.ReactNode;
    defaultValue: FieldValue | ((currentDefaultValue?: FieldValue) => FieldValue);
    id?: string;
    isRequired?: boolean;
    isDisabled: boolean;
    label?: ReactNode;
    name: string;
    transform?: (event: FormEvent<Element> | FieldValue, current: FieldValue) => FieldValue;
    validate?: (value: FieldValue | undefined, formState: Object, fieldState: Meta) => string | void | Promise<string | void>;
}
export declare const FieldId: React.Context<string | undefined>;
declare function Field<FieldValue = string, Element extends SupportedElements = HTMLInputElement>(props: Props<FieldValue, Element>): JSX.Element;
declare namespace Field {
    var defaultProps: {
        defaultValue: undefined;
        isDisabled: boolean;
    };
}
export default Field;
