import { __assign, __read, __rest, __spread } from "tslib";
import React, { useCallback } from 'react';
import Field from './Field';
var CheckboxField = function (props) {
    var children = props.children, _a = props.defaultIsChecked, defaultIsChecked = _a === void 0 ? false : _a, value = props.value, rest = __rest(props, ["children", "defaultIsChecked", "value"]);
    // Maintains a memoised list of the default values
    var defaultValue = useCallback(function (currentValue) {
        if (currentValue === void 0) { currentValue = []; }
        return defaultIsChecked && value !== undefined
            ? __spread(currentValue, [value]) : currentValue;
    }, [value, defaultIsChecked]);
    return value !== undefined ? (React.createElement(Field, __assign({}, rest, { defaultValue: defaultValue, transform: function (event, currentValue) {
            return event.currentTarget.checked && currentValue
                ? __spread(currentValue, [value]) : currentValue.filter(function (v) { return v !== value; });
        } }), function (_a) {
        var _b = _a.fieldProps, fieldValue = _b.value, otherFieldProps = __rest(_b, ["value"]), others = __rest(_a, ["fieldProps"]);
        return children(__assign({ fieldProps: __assign(__assign({}, otherFieldProps), { isChecked: !!fieldValue.find(function (v) { return v === value; }), value: value }) }, others));
    })) : (React.createElement(Field, __assign({}, rest, { defaultValue: defaultIsChecked, transform: function (event) { return event.currentTarget.checked; } }), function (_a) {
        var _b = _a.fieldProps, fieldValue = _b.value, otherFieldProps = __rest(_b, ["value"]), others = __rest(_a, ["fieldProps"]);
        return children(__assign({ fieldProps: __assign(__assign({}, otherFieldProps), { isChecked: fieldValue, value: value }) }, others));
    }));
};
CheckboxField.defaultProps = {
    defaultIsChecked: false,
};
export default CheckboxField;
//# sourceMappingURL=CheckboxField.js.map