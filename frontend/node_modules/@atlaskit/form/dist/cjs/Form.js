"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
var final_form_1 = require("final-form");
var final_form_focus_1 = tslib_1.__importDefault(require("final-form-focus"));
var lodash_set_1 = tslib_1.__importDefault(require("lodash.set"));
exports.FormContext = react_1.createContext(function () {
    return function () { };
});
exports.IsDisabledContext = react_1.createContext(false);
function Form(props) {
    var formRef = react_1.useRef(null);
    var onSubmitRef = react_1.useRef(props.onSubmit);
    onSubmitRef.current = props.onSubmit;
    var form = react_1.useState(function () {
        var finalForm = final_form_1.createForm({
            onSubmit: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return onSubmitRef.current.apply(onSubmitRef, tslib_1.__spread(args));
            },
            destroyOnUnregister: true,
            initialValues: {},
            mutators: {
                setDefaultValue: function (_a, state) {
                    var _b = tslib_1.__read(_a, 2), name = _b[0], defaultValue = _b[1];
                    if (state.formState.initialValues) {
                        var initialValues = state.formState.initialValues;
                        var values = state.formState.values;
                        var value = name && typeof defaultValue === 'function'
                            ? defaultValue(initialValues[name])
                            : defaultValue;
                        /* eslint-disable no-param-reassign */
                        lodash_set_1.default(initialValues, name, value);
                        lodash_set_1.default(values, name, value);
                        /* eslint-enable */
                    }
                },
            },
        });
        final_form_focus_1.default(function () {
            return formRef.current
                ? Array.from(formRef.current.querySelectorAll('input'))
                : [];
        })(finalForm);
        return finalForm;
    })[0];
    var _a = tslib_1.__read(react_1.useState({
        dirty: false,
        submitting: false,
    }), 2), state = _a[0], setState = _a[1];
    react_1.useEffect(function () {
        var unsubscribe = form.subscribe(function (_a) {
            var dirty = _a.dirty, submitting = _a.submitting;
            setState({ dirty: dirty, submitting: submitting });
        }, {
            dirty: true,
            submitting: true,
        });
        return unsubscribe;
    }, [form]);
    var registerField = react_1.useCallback(function (name, defaultValue, subscriber, subscription, config) {
        form.pauseValidation();
        var unsubscribe = form.registerField(name, subscriber, subscription, config);
        form.mutators.setDefaultValue(name, defaultValue);
        form.resumeValidation();
        return unsubscribe;
    }, [form]);
    var handleSubmit = function (e) {
        if (e) {
            e.preventDefault();
        }
        form.submit();
    };
    var handleReset = function (initialValues) {
        form.reset(initialValues);
    };
    var handleKeyDown = function (e) {
        if (e.key === 'Enter' && (e.ctrlKey || e.metaKey) && formRef.current) {
            var submitButton = formRef.current.querySelector('button:not([type]), button[type="submit"], input[type="submit"]');
            if (submitButton)
                submitButton.click();
            e.preventDefault();
        }
    };
    var _b = props.isDisabled, isDisabled = _b === void 0 ? false : _b, children = props.children;
    var dirty = state.dirty, submitting = state.submitting;
    return (react_1.default.createElement(exports.FormContext.Provider, { value: registerField },
        react_1.default.createElement(exports.IsDisabledContext.Provider, { value: isDisabled }, children({
            formProps: {
                onSubmit: handleSubmit,
                ref: formRef,
                onKeyDown: handleKeyDown,
            },
            dirty: dirty,
            reset: handleReset,
            submitting: submitting,
            disabled: isDisabled,
            getValues: function () { return form.getState().values; },
            setFieldValue: form.change,
        }))));
}
exports.default = Form;
//# sourceMappingURL=Form.js.map