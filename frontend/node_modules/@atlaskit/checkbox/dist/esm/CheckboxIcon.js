import { __extends } from "tslib";
import React, { Component } from 'react';
import Icon from '@atlaskit/icon/glyph/checkbox';
import CheckboxIndeterminateIcon from '@atlaskit/icon/glyph/checkbox-indeterminate';
import { IconWrapper } from './styled/Checkbox';
var CheckboxIcon = /** @class */ (function (_super) {
    __extends(CheckboxIcon, _super);
    function CheckboxIcon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CheckboxIcon.prototype.render = function () {
        var _a = this.props, isChecked = _a.isChecked, isDisabled = _a.isDisabled, isInvalid = _a.isInvalid, isActive = _a.isActive, isFocused = _a.isFocused, isHovered = _a.isHovered, isIndeterminate = _a.isIndeterminate, primaryColor = _a.primaryColor, secondaryColor = _a.secondaryColor;
        return (React.createElement(IconWrapper, { isChecked: isChecked, isDisabled: isDisabled, isFocused: isFocused, isActive: isActive, isHovered: isHovered, isInvalid: isInvalid }, isIndeterminate ? (React.createElement(CheckboxIndeterminateIcon, { primaryColor: primaryColor, secondaryColor: secondaryColor, label: "" })) : (React.createElement(Icon, { primaryColor: primaryColor, secondaryColor: secondaryColor, label: "" }))));
    };
    CheckboxIcon.defaultProps = {
        primaryColor: 'inherit',
        secondaryColor: 'inherit',
        isIndeterminate: false,
    };
    return CheckboxIcon;
}(Component));
export default CheckboxIcon;
//# sourceMappingURL=CheckboxIcon.js.map