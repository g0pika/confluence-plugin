import { __assign, __makeTemplateObject, __rest } from "tslib";
/** @jsx jsx */
import { jsx, css } from '@emotion/core';
import { themed } from '@atlaskit/theme/components';
import { gridSize } from '@atlaskit/theme/constants';
import * as colors from '@atlaskit/theme/colors';
import { multiply } from '@atlaskit/theme/math';
import React from 'react';
export var HiddenCheckbox = React.forwardRef(function (
// @ts-ignore - createAnalyticsEvent is injected from WithAnalyticsEvents HOC
_a, ref) {
    var createAnalyticsEvent = _a.createAnalyticsEvent, props = __rest(_a, 
    // @ts-ignore - createAnalyticsEvent is injected from WithAnalyticsEvents HOC
    ["createAnalyticsEvent"]);
    return (jsx("input", __assign({ ref: ref, css: css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n      left: 50%;\n      margin: 0;\n      opacity: 0;\n      padding: 0;\n      position: absolute;\n      transform: translate(-50%, -50%);\n      top: 50%;\n    "], ["\n      left: 50%;\n      margin: 0;\n      opacity: 0;\n      padding: 0;\n      position: absolute;\n      transform: translate(-50%, -50%);\n      top: 50%;\n    "]))) }, props)));
});
var disabledColor = themed({ light: colors.N80, dark: colors.N80 });
export var Label = function (_a) {
    var isDisabled = _a.isDisabled, rest = __rest(_a, ["isDisabled"]);
    return (jsx("label", __assign({ css: css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n      align-items: flex-start;\n      display: flex;\n      color: ", ";\n      ", ";\n    "], ["\n      align-items: flex-start;\n      display: flex;\n      color: ", ";\n      ",
            ";\n    "])), isDisabled ? disabledColor(rest) : colors.text(rest), isDisabled
            ? css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n            cursor: not-allowed;\n          "], ["\n            cursor: not-allowed;\n          "]))) : '') }, rest)));
};
var borderColor = themed({ light: colors.N40, dark: colors.DN80 });
var activeBorder = css(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  stroke: currentColor;\n  stroke-width: 2px;\n"], ["\n  stroke: currentColor;\n  stroke-width: 2px;\n"])));
var checkedBorder = css(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  stroke: currentColor;\n  stroke-width: 2px;\n"], ["\n  stroke: currentColor;\n  stroke-width: 2px;\n"])));
var focusBorder = function (props) { return css(templateObject_6 || (templateObject_6 = __makeTemplateObject(["\n  stroke: ", ";\n  stroke-width: 2px;\n"], ["\n  stroke: ", ";\n  stroke-width: 2px;\n"])), themed({ light: colors.B100, dark: colors.B75 })(props)); };
var invalidBorder = function (props) { return css(templateObject_7 || (templateObject_7 = __makeTemplateObject(["\n  stroke: ", ";\n  stroke-width: 2px;\n"], ["\n  stroke: ", ";\n  stroke-width: 2px;\n"])), themed({ light: colors.R300, dark: colors.R300 })(props)); };
var border = function (_a) {
    var isHovered = _a.isHovered, rest = __rest(_a, ["isHovered"]);
    return css(templateObject_8 || (templateObject_8 = __makeTemplateObject(["\n  stroke: ", ";\n  stroke-width: 2px;\n"], ["\n  stroke: ",
        ";\n  stroke-width: 2px;\n"])), isHovered
        ? themed({ light: colors.N40, dark: colors.DN200 })(rest)
        : borderColor(rest));
};
var getBorderColor = function (props) {
    if (props.isDisabled) {
        return '';
    }
    if (props.isActive) {
        return activeBorder;
    }
    if (props.isChecked) {
        return checkedBorder;
    }
    if (props.isFocused) {
        return focusBorder(props);
    }
    if (props.isInvalid) {
        return invalidBorder(props);
    }
    return border(props);
};
var getTickColor = function (props) {
    var isChecked = props.isChecked, isDisabled = props.isDisabled, isActive = props.isActive, rest = __rest(props, ["isChecked", "isDisabled", "isActive"]);
    var color = themed({ light: colors.N10, dark: colors.DN10 });
    if (isDisabled && isChecked) {
        color = themed({ light: colors.N70, dark: colors.DN90 });
    }
    else if (isActive && isChecked && !isDisabled) {
        color = themed({ light: colors.B400, dark: colors.DN10 });
    }
    else if (!isChecked) {
        color = themed({ light: 'transparent', dark: 'transparent' });
    }
    return color(rest);
};
var getBoxColor = function (props) {
    var isChecked = props.isChecked, isDisabled = props.isDisabled, isActive = props.isActive, isHovered = props.isHovered, rest = __rest(props, ["isChecked", "isDisabled", "isActive", "isHovered"]);
    // set the default
    var color = themed({ light: colors.N10, dark: colors.DN10 });
    if (isDisabled) {
        color = themed({ light: colors.N20, dark: colors.DN10 });
    }
    else if (isActive) {
        color = themed({ light: colors.B50, dark: colors.B200 });
    }
    else if (isHovered && isChecked) {
        color = themed({ light: colors.B300, dark: colors.B75 });
    }
    else if (isHovered) {
        color = themed({ light: colors.N30, dark: colors.DN30 });
    }
    else if (isChecked) {
        color = themed({ light: colors.B400, dark: colors.B400 });
    }
    return color(rest);
};
export var LabelText = function (props) { return (jsx("span", __assign({ css: css(templateObject_9 || (templateObject_9 = __makeTemplateObject(["\n      padding: 2px 4px;\n    "], ["\n      padding: 2px 4px;\n    "]))) }, props))); };
export var CheckboxWrapper = function (props) { return (jsx("span", __assign({ css: css(templateObject_10 || (templateObject_10 = __makeTemplateObject(["\n      display: flex;\n      flex-shrink: 0;\n      position: relative;\n    "], ["\n      display: flex;\n      flex-shrink: 0;\n      position: relative;\n    "]))) }, props))); };
export var IconWrapper = function (_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (jsx("span", { css: css(templateObject_11 || (templateObject_11 = __makeTemplateObject(["\n      line-height: 0;\n      flex-shrink: 0;\n      color: ", ";\n      fill: ", ";\n      transition: all 0.2s ease-in-out;\n\n      /* This is adding a property to the inner svg, to add a border to the checkbox */\n      & rect:first-of-type {\n        transition: stroke 0.2s ease-in-out;\n        ", ";\n      }\n\n      /**\n      * Need to set the Icon component wrapper to flex to avoid a scrollbar bug which\n      * happens when checkboxes are flex items in a parent with overflow.\n      * See AK-6321 for more details.\n      **/\n      > span {\n        display: flex;\n      }\n    "], ["\n      line-height: 0;\n      flex-shrink: 0;\n      color: ", ";\n      fill: ", ";\n      transition: all 0.2s ease-in-out;\n\n      /* This is adding a property to the inner svg, to add a border to the checkbox */\n      & rect:first-of-type {\n        transition: stroke 0.2s ease-in-out;\n        ", ";\n      }\n\n      /**\n      * Need to set the Icon component wrapper to flex to avoid a scrollbar bug which\n      * happens when checkboxes are flex items in a parent with overflow.\n      * See AK-6321 for more details.\n      **/\n      > span {\n        display: flex;\n      }\n    "])), getBoxColor(props), getTickColor(props), getBorderColor(props)), children: children }));
};
export var RequiredIndicator = function (props) { return (jsx("span", __assign({ css: css(templateObject_12 || (templateObject_12 = __makeTemplateObject(["\n      color: ", ";\n      padding-left: ", "px;\n    "], ["\n      color: ", ";\n      padding-left: ", "px;\n    "])), colors.R400, multiply(gridSize, 0.25)) }, props))); };
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12;
//# sourceMappingURL=Checkbox.js.map