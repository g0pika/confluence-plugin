"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("react");
var _react2 = require("@emotion/react");
var _tinyInvariant = _interopRequireDefault(require("tiny-invariant"));
var _colorMap = _interopRequireDefault(require("../internal/color-map"));
var _surfaceProvider = require("./surface-provider");
var _excluded = ["children"];
/** @jsx jsx */
var asAllowlist = ['span', 'div', 'p', 'strong'];
var textAlignMap = {
  center: (0, _react2.css)({
    textAlign: 'center'
  }),
  end: (0, _react2.css)({
    textAlign: 'end'
  }),
  start: (0, _react2.css)({
    textAlign: 'start'
  })
};
var textTransformMap = {
  none: (0, _react2.css)({
    textTransform: 'none'
  }),
  lowercase: (0, _react2.css)({
    textTransform: 'lowercase'
  }),
  uppercase: (0, _react2.css)({
    textTransform: 'uppercase'
  })
};
var verticalAlignMap = {
  top: (0, _react2.css)({
    verticalAlign: 'top'
  }),
  middle: (0, _react2.css)({
    verticalAlign: 'middle'
  }),
  bottom: (0, _react2.css)({
    verticalAlign: 'bottom'
  })
};
var baseStyles = (0, _react2.css)({
  boxSizing: 'border-box',
  margin: "var(--ds-space-0, 0px)",
  padding: "var(--ds-space-0, 0px)"
});
var truncateStyles = (0, _react2.css)({
  overflow: 'hidden',
  textOverflow: 'ellipsis',
  whiteSpace: 'nowrap'
});

/**
 * Custom hook designed to abstract the parsing of the color props and make it clearer in the future how color is reconciled between themes and tokens.
 */
var useColor = function useColor(colorProp) {
  var surface = (0, _surfaceProvider.useSurface)();
  var inverseTextColor = _colorMap.default[surface];

  /**
   * Where the color of the surface is inverted we override the user choice
   * as there is no valid choice that is not covered by the override.
   */
  var color = inverseTextColor !== null && inverseTextColor !== void 0 ? inverseTextColor : colorProp;
  return color;
};
var HasTextAncestorContext = /*#__PURE__*/(0, _react.createContext)(false);
var useHasTextAncestor = function useHasTextAncestor() {
  return (0, _react.useContext)(HasTextAncestorContext);
};

/**
 * __Text__
 *
 * Text is a primitive component that has the Atlassian Design System's design guidelines baked in.
 * This includes considerations for text attributes such as color, font size, font weight, and line height.
 * It renders a `span` by default.
 *
 * @internal
 */
var Text = function Text(_ref) {
  var children = _ref.children,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _props$as = props.as,
    Component = _props$as === void 0 ? 'span' : _props$as,
    colorProp = props.color,
    fontSize = props.fontSize,
    fontWeight = props.fontWeight,
    lineHeight = props.lineHeight,
    _props$shouldTruncate = props.shouldTruncate,
    shouldTruncate = _props$shouldTruncate === void 0 ? false : _props$shouldTruncate,
    textAlign = props.textAlign,
    textTransform = props.textTransform,
    verticalAlign = props.verticalAlign,
    testId = props.testId,
    UNSAFE_style = props.UNSAFE_style,
    id = props.id;
  (0, _tinyInvariant.default)(asAllowlist.includes(Component), "@atlaskit/ds-explorations: Text received an invalid \"as\" value of \"".concat(Component, "\""));
  var color = useColor(colorProp);
  var isWrapped = useHasTextAncestor();

  /**
   * If the text is already wrapped and applies no props we can just
   * render the children directly as a fragment.
   */
  if (isWrapped && Object.keys(props).length === 0) {
    return (0, _react2.jsx)(_react.Fragment, null, children);
  }
  var component = (0, _react2.jsx)(Component, {
    style: UNSAFE_style,
    css: [baseStyles, fontFamilyMap.sans, color && textColorMap[color], fontSize && fontSizeMap[fontSize], fontWeight && fontWeightMap[fontWeight], lineHeight && lineHeightMap[lineHeight], shouldTruncate && truncateStyles, textAlign && textAlignMap[textAlign], textTransform && textTransformMap[textTransform], verticalAlign && verticalAlignMap[verticalAlign]],
    "data-testid": testId,
    id: id
  }, children);
  return isWrapped ?
  // no need to re-apply context if the text is already wrapped
  component : (0, _react2.jsx)(HasTextAncestorContext.Provider, {
    value: true
  }, component);
};
var _default = exports.default = Text;
/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::fe02dc1da6471f0cd0c93cb3fa16272e>>
 * @codegenId typography
 * @codegenCommand yarn codegen-styles
 * @codegenParams ["fontSize", "fontWeight", "fontFamily", "lineHeight"]
 * @codegenDependency ../../../tokens/src/artifacts/tokens-raw/atlassian-typography-adg3.tsx <<SignedSource::22351c8864d5ab21980c3493082fde9b>>
 */
var fontSizeMap = {
  'size.050': (0, _react2.css)({
    fontSize: "var(--ds-font-size-050, 11px)"
  }),
  'size.075': (0, _react2.css)({
    fontSize: "var(--ds-font-size-075, 12px)"
  }),
  'size.100': (0, _react2.css)({
    fontSize: "var(--ds-font-size-100, 14px)"
  }),
  'size.200': (0, _react2.css)({
    fontSize: "var(--ds-font-size-200, 16px)"
  }),
  'size.300': (0, _react2.css)({
    fontSize: "var(--ds-font-size-300, 20px)"
  }),
  'size.400': (0, _react2.css)({
    fontSize: "var(--ds-font-size-400, 24px)"
  }),
  'size.500': (0, _react2.css)({
    fontSize: "var(--ds-font-size-500, 29px)"
  }),
  'size.600': (0, _react2.css)({
    fontSize: "var(--ds-font-size-600, 35px)"
  })
};
var fontWeightMap = {
  bold: (0, _react2.css)({
    fontWeight: "var(--ds-font-weight-bold, 700)"
  }),
  medium: (0, _react2.css)({
    fontWeight: "var(--ds-font-weight-medium, 500)"
  }),
  regular: (0, _react2.css)({
    fontWeight: "var(--ds-font-weight-regular, 400)"
  }),
  semibold: (0, _react2.css)({
    fontWeight: "var(--ds-font-weight-semibold, 600)"
  })
};
var fontFamilyMap = {
  body: (0, _react2.css)({
    fontFamily: "var(--ds-font-family-body, ui-sans-serif, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
  }),
  brand: (0, _react2.css)({
    fontFamily: "var(--ds-font-family-brand, Charlie Sans)"
  }),
  code: (0, _react2.css)({
    fontFamily: "var(--ds-font-family-code, ui-monospace, Menlo, \"Segoe UI Mono\", \"Ubuntu Mono\", monospace)"
  }),
  heading: (0, _react2.css)({
    fontFamily: "var(--ds-font-family-heading, ui-sans-serif, \"Segoe UI\", Ubuntu, system-ui, \"Helvetica Neue\", sans-serif)"
  }),
  monospace: (0, _react2.css)({
    fontFamily: "var(--ds-font-family-monospace, ui-monospace, Menlo, \"Segoe UI Mono\", \"Ubuntu Mono\", monospace)"
  }),
  sans: (0, _react2.css)({
    fontFamily: "var(--ds-font-family-sans, -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif)"
  })
};
var lineHeightMap = {
  'lineHeight.1': (0, _react2.css)({
    lineHeight: "var(--ds-font-lineHeight-1, 1)"
  }),
  'lineHeight.100': (0, _react2.css)({
    lineHeight: "var(--ds-font-lineHeight-100, 16px)"
  }),
  'lineHeight.200': (0, _react2.css)({
    lineHeight: "var(--ds-font-lineHeight-200, 20px)"
  }),
  'lineHeight.300': (0, _react2.css)({
    lineHeight: "var(--ds-font-lineHeight-300, 24px)"
  }),
  'lineHeight.400': (0, _react2.css)({
    lineHeight: "var(--ds-font-lineHeight-400, 28px)"
  }),
  'lineHeight.500': (0, _react2.css)({
    lineHeight: "var(--ds-font-lineHeight-500, 32px)"
  }),
  'lineHeight.600': (0, _react2.css)({
    lineHeight: "var(--ds-font-lineHeight-600, 40px)"
  })
};
/**
 * @codegenEnd
 */
/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::95d4f240e36e302a634e8633a0782cba>>
 * @codegenId colors
 * @codegenCommand yarn codegen-styles
 * @codegenParams ["text"]
 * @codegenDependency ../../../tokens/src/artifacts/tokens-raw/atlassian-light.tsx <<SignedSource::f1021f8d47ab63374e371ce18db72a1c>>
 */
var textColorMap = {
  'color.text': (0, _react2.css)({
    color: "var(--ds-text, #172B4D)"
  }),
  disabled: (0, _react2.css)({
    color: "var(--ds-text-disabled, #A5ADBA)"
  }),
  inverse: (0, _react2.css)({
    color: "var(--ds-text-inverse, #FFFFFF)"
  }),
  selected: (0, _react2.css)({
    color: "var(--ds-text-selected, #0052CC)"
  }),
  brand: (0, _react2.css)({
    color: "var(--ds-text-brand, #0065FF)"
  }),
  danger: (0, _react2.css)({
    color: "var(--ds-text-danger, #DE350B)"
  }),
  warning: (0, _react2.css)({
    color: "var(--ds-text-warning, #974F0C)"
  }),
  'warning.inverse': (0, _react2.css)({
    color: "var(--ds-text-warning-inverse, #172B4D)"
  }),
  success: (0, _react2.css)({
    color: "var(--ds-text-success, #006644)"
  }),
  discovery: (0, _react2.css)({
    color: "var(--ds-text-discovery, #403294)"
  }),
  information: (0, _react2.css)({
    color: "var(--ds-text-information, #0052CC)"
  }),
  subtlest: (0, _react2.css)({
    color: "var(--ds-text-subtlest, #7A869A)"
  }),
  subtle: (0, _react2.css)({
    color: "var(--ds-text-subtle, #42526E)"
  })
};

/**
 * @codegenEnd
 */