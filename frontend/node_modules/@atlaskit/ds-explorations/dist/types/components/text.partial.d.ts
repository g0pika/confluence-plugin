/** @jsx jsx */
import { FC, ReactNode } from 'react';
import type { BasePrimitiveProps } from './types';
declare const asAllowlist: readonly ["span", "div", "p", "strong"];
type AsElement = (typeof asAllowlist)[number];
export interface TextProps extends BasePrimitiveProps {
    /**
     * HTML tag to be rendered. Defaults to `span`.
     */
    as?: AsElement;
    /**
     * Elements rendered within the Text element
     */
    children: ReactNode;
    /**
     * Text color
     */
    color?: TextColor;
    /**
     * The HTML id attribute https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id
     */
    id?: string;
    /**
     * Font size https://developer.mozilla.org/en-US/docs/Web/CSS/font-size
     */
    fontSize?: FontSize;
    /**
     * Font weight https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight
     */
    fontWeight?: FontWeight;
    /**
     * Line height https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
     */
    lineHeight?: LineHeight;
    /**
     * Truncates text with an ellipsis when text overflows its parent container
     * (i.e. `width` has been set on parent that is shorter than text length).
     */
    shouldTruncate?: boolean;
    /**
     * Text align https://developer.mozilla.org/en-US/docs/Web/CSS/text-align
     */
    textAlign?: TextAlign;
    /**
     * Text transform https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform
     */
    textTransform?: TextTransform;
    /**
     * Vertical align https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align
     */
    verticalAlign?: VerticalAlign;
}
type TextAlign = keyof typeof textAlignMap;
declare const textAlignMap: {
    center: import("@emotion/react").SerializedStyles;
    end: import("@emotion/react").SerializedStyles;
    start: import("@emotion/react").SerializedStyles;
};
type TextTransform = keyof typeof textTransformMap;
declare const textTransformMap: {
    none: import("@emotion/react").SerializedStyles;
    lowercase: import("@emotion/react").SerializedStyles;
    uppercase: import("@emotion/react").SerializedStyles;
};
type VerticalAlign = keyof typeof verticalAlignMap;
declare const verticalAlignMap: {
    top: import("@emotion/react").SerializedStyles;
    middle: import("@emotion/react").SerializedStyles;
    bottom: import("@emotion/react").SerializedStyles;
};
/**
 * __Text__
 *
 * Text is a primitive component that has the Atlassian Design System's design guidelines baked in.
 * This includes considerations for text attributes such as color, font size, font weight, and line height.
 * It renders a `span` by default.
 *
 * @internal
 */
declare const Text: FC<TextProps>;
export default Text;
/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::fe02dc1da6471f0cd0c93cb3fa16272e>>
 * @codegenId typography
 * @codegenCommand yarn codegen-styles
 * @codegenParams ["fontSize", "fontWeight", "fontFamily", "lineHeight"]
 * @codegenDependency ../../../tokens/src/artifacts/tokens-raw/atlassian-typography-adg3.tsx <<SignedSource::22351c8864d5ab21980c3493082fde9b>>
 */
declare const fontSizeMap: {
    'size.050': import("@emotion/react").SerializedStyles;
    'size.075': import("@emotion/react").SerializedStyles;
    'size.100': import("@emotion/react").SerializedStyles;
    'size.200': import("@emotion/react").SerializedStyles;
    'size.300': import("@emotion/react").SerializedStyles;
    'size.400': import("@emotion/react").SerializedStyles;
    'size.500': import("@emotion/react").SerializedStyles;
    'size.600': import("@emotion/react").SerializedStyles;
};
export type FontSize = keyof typeof fontSizeMap;
declare const fontWeightMap: {
    bold: import("@emotion/react").SerializedStyles;
    medium: import("@emotion/react").SerializedStyles;
    regular: import("@emotion/react").SerializedStyles;
    semibold: import("@emotion/react").SerializedStyles;
};
export type FontWeight = keyof typeof fontWeightMap;
declare const fontFamilyMap: {
    body: import("@emotion/react").SerializedStyles;
    brand: import("@emotion/react").SerializedStyles;
    code: import("@emotion/react").SerializedStyles;
    heading: import("@emotion/react").SerializedStyles;
    monospace: import("@emotion/react").SerializedStyles;
    sans: import("@emotion/react").SerializedStyles;
};
export type FontFamily = keyof typeof fontFamilyMap;
declare const lineHeightMap: {
    'lineHeight.1': import("@emotion/react").SerializedStyles;
    'lineHeight.100': import("@emotion/react").SerializedStyles;
    'lineHeight.200': import("@emotion/react").SerializedStyles;
    'lineHeight.300': import("@emotion/react").SerializedStyles;
    'lineHeight.400': import("@emotion/react").SerializedStyles;
    'lineHeight.500': import("@emotion/react").SerializedStyles;
    'lineHeight.600': import("@emotion/react").SerializedStyles;
};
export type LineHeight = keyof typeof lineHeightMap;
/**
 * @codegenEnd
 */
/**
 * THIS SECTION WAS CREATED VIA CODEGEN DO NOT MODIFY {@see http://go/af-codegen}
 * @codegen <<SignedSource::95d4f240e36e302a634e8633a0782cba>>
 * @codegenId colors
 * @codegenCommand yarn codegen-styles
 * @codegenParams ["text"]
 * @codegenDependency ../../../tokens/src/artifacts/tokens-raw/atlassian-light.tsx <<SignedSource::f1021f8d47ab63374e371ce18db72a1c>>
 */
declare const textColorMap: {
    readonly 'color.text': import("@emotion/react").SerializedStyles;
    readonly disabled: import("@emotion/react").SerializedStyles;
    readonly inverse: import("@emotion/react").SerializedStyles;
    readonly selected: import("@emotion/react").SerializedStyles;
    readonly brand: import("@emotion/react").SerializedStyles;
    readonly danger: import("@emotion/react").SerializedStyles;
    readonly warning: import("@emotion/react").SerializedStyles;
    readonly 'warning.inverse': import("@emotion/react").SerializedStyles;
    readonly success: import("@emotion/react").SerializedStyles;
    readonly discovery: import("@emotion/react").SerializedStyles;
    readonly information: import("@emotion/react").SerializedStyles;
    readonly subtlest: import("@emotion/react").SerializedStyles;
    readonly subtle: import("@emotion/react").SerializedStyles;
};
export type TextColor = keyof typeof textColorMap;
/**
 * @codegenEnd
 */
