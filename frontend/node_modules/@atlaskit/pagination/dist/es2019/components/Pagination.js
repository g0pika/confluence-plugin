import React, { Component, Fragment } from 'react';
import { createAndFireEvent, withAnalyticsContext, withAnalyticsEvents, } from '@atlaskit/analytics-next';
import collapseRangeHelper from '../util/collapseRange';
import { name as packageName, version as packageVersion, } from '../version.json';
import { LeftNavigator, RightNavigator } from './Navigators';
import PageComponent from './Page';
import renderDefaultEllipsis from './renderEllipsis';
class Pagination extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            selectedIndex: this.props.defaultSelectedIndex || 0,
        };
        this.createAndFireEventOnAtlaskit = createAndFireEvent('atlaskit');
        this.onChangeAnalyticsCaller = () => {
            const { createAnalyticsEvent } = this.props;
            if (createAnalyticsEvent) {
                return this.createAndFireEventOnAtlaskit({
                    action: 'changed',
                    actionSubject: 'pageNumber',
                    attributes: {
                        componentName: 'pagination',
                        packageName,
                        packageVersion,
                    },
                })(createAnalyticsEvent);
            }
            return undefined;
        };
        this.onChange = (event, newSelectedPage) => {
            if (this.props.selectedIndex === undefined) {
                this.setState({
                    selectedIndex: newSelectedPage,
                });
            }
            const analyticsEvent = this.onChangeAnalyticsCaller();
            if (this.props.onChange) {
                this.props.onChange(event, this.props.pages[newSelectedPage], analyticsEvent);
            }
        };
        this.pagesToComponents = (pages) => {
            const { selectedIndex } = this.state;
            const { components, getPageLabel } = this.props;
            return pages.map((page, index) => {
                return (React.createElement(PageComponent, { key: `page-${getPageLabel ? getPageLabel(page, index) : index}`, component: components.Page, onClick: event => this.onChange(event, index), isSelected: selectedIndex === index, page: page }, getPageLabel ? getPageLabel(page, index) : page));
            });
        };
        this.renderPages = () => {
            const { selectedIndex } = this.state;
            const { pages, max, collapseRange, renderEllipsis } = this.props;
            const pagesComponents = this.pagesToComponents(pages);
            // @ts-ignore
            return collapseRange(pagesComponents, selectedIndex, {
                max: max,
                ellipsis: renderEllipsis,
            });
        };
        this.renderLeftNavigator = () => {
            const { components, pages, i18n } = this.props;
            const { selectedIndex } = this.state;
            const props = {
                'aria-label': i18n.prev,
                pages,
            };
            return (React.createElement(LeftNavigator, Object.assign({ key: "left-navigator", component: components.Previous, onClick: event => this.onChange(event, selectedIndex - 1), isDisabled: selectedIndex === 0 }, props)));
        };
        this.renderRightNavigator = () => {
            const { components, pages, i18n } = this.props;
            const { selectedIndex } = this.state;
            const props = {
                'aria-label': i18n.next,
                pages,
            };
            return (React.createElement(RightNavigator, Object.assign({ key: "right-navigator", component: components.Next, onClick: event => this.onChange(event, selectedIndex + 1), isDisabled: selectedIndex === pages.length - 1 }, props)));
        };
    }
    static getDerivedStateFromProps(props) {
        // selectedIndex is controlled
        if (props.selectedIndex != null) {
            return {
                selectedIndex: props.selectedIndex,
            };
        }
        return null;
    }
    render() {
        const { innerStyles } = this.props;
        return (React.createElement("div", { style: { display: 'flex', ...innerStyles } },
            React.createElement(Fragment, null,
                this.renderLeftNavigator(),
                this.renderPages(),
                this.renderRightNavigator())));
    }
}
Pagination.defaultProps = {
    collapseRange: collapseRangeHelper,
    components: {},
    defaultSelectedIndex: 0,
    i18n: {
        prev: 'previous',
        next: 'next',
    },
    innerStyles: {},
    max: 7,
    onChange: () => { },
    renderEllipsis: renderDefaultEllipsis,
};
export default withAnalyticsContext({
    componentName: 'pagination',
    packageName,
    packageVersion,
})(withAnalyticsEvents()(Pagination));
//# sourceMappingURL=Pagination.js.map